// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: api.proto

#include "api.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
namespace pbapi {
class PK_LOG_HEARTBEATDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PK_LOG_HEARTBEAT> _instance;
} _PK_LOG_HEARTBEAT_default_instance_;
class PK_LOG_INFO_REQDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PK_LOG_INFO_REQ> _instance;
} _PK_LOG_INFO_REQ_default_instance_;
class PK_LOG_INFO_RSPDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PK_LOG_INFO_RSP> _instance;
} _PK_LOG_INFO_RSP_default_instance_;
class PK_LOG_SUBSCRIBE_REQDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PK_LOG_SUBSCRIBE_REQ> _instance;
} _PK_LOG_SUBSCRIBE_REQ_default_instance_;
class PK_LOG_SUBSCRIBE_RSPDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PK_LOG_SUBSCRIBE_RSP> _instance;
} _PK_LOG_SUBSCRIBE_RSP_default_instance_;
class PK_LOG_PUBLISH_NOTICEDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PK_LOG_PUBLISH_NOTICE> _instance;
} _PK_LOG_PUBLISH_NOTICE_default_instance_;
}  // namespace pbapi
static void InitDefaultsscc_info_PK_LOG_HEARTBEAT_api_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pbapi::_PK_LOG_HEARTBEAT_default_instance_;
    new (ptr) ::pbapi::PK_LOG_HEARTBEAT();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pbapi::PK_LOG_HEARTBEAT::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PK_LOG_HEARTBEAT_api_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PK_LOG_HEARTBEAT_api_2eproto}, {}};

static void InitDefaultsscc_info_PK_LOG_INFO_REQ_api_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pbapi::_PK_LOG_INFO_REQ_default_instance_;
    new (ptr) ::pbapi::PK_LOG_INFO_REQ();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pbapi::PK_LOG_INFO_REQ::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PK_LOG_INFO_REQ_api_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PK_LOG_INFO_REQ_api_2eproto}, {}};

static void InitDefaultsscc_info_PK_LOG_INFO_RSP_api_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pbapi::_PK_LOG_INFO_RSP_default_instance_;
    new (ptr) ::pbapi::PK_LOG_INFO_RSP();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pbapi::PK_LOG_INFO_RSP::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PK_LOG_INFO_RSP_api_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PK_LOG_INFO_RSP_api_2eproto}, {}};

static void InitDefaultsscc_info_PK_LOG_PUBLISH_NOTICE_api_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pbapi::_PK_LOG_PUBLISH_NOTICE_default_instance_;
    new (ptr) ::pbapi::PK_LOG_PUBLISH_NOTICE();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pbapi::PK_LOG_PUBLISH_NOTICE::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PK_LOG_PUBLISH_NOTICE_api_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PK_LOG_PUBLISH_NOTICE_api_2eproto}, {}};

static void InitDefaultsscc_info_PK_LOG_SUBSCRIBE_REQ_api_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pbapi::_PK_LOG_SUBSCRIBE_REQ_default_instance_;
    new (ptr) ::pbapi::PK_LOG_SUBSCRIBE_REQ();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pbapi::PK_LOG_SUBSCRIBE_REQ::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PK_LOG_SUBSCRIBE_REQ_api_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PK_LOG_SUBSCRIBE_REQ_api_2eproto}, {}};

static void InitDefaultsscc_info_PK_LOG_SUBSCRIBE_RSP_api_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pbapi::_PK_LOG_SUBSCRIBE_RSP_default_instance_;
    new (ptr) ::pbapi::PK_LOG_SUBSCRIBE_RSP();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pbapi::PK_LOG_SUBSCRIBE_RSP::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PK_LOG_SUBSCRIBE_RSP_api_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PK_LOG_SUBSCRIBE_RSP_api_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_api_2eproto[6];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_api_2eproto[6];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_api_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_api_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pbapi::PK_LOG_HEARTBEAT, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pbapi::PK_LOG_HEARTBEAT, name_),
  PROTOBUF_FIELD_OFFSET(::pbapi::PK_LOG_HEARTBEAT, pwd_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pbapi::PK_LOG_INFO_REQ, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pbapi::PK_LOG_INFO_REQ, name_),
  PROTOBUF_FIELD_OFFSET(::pbapi::PK_LOG_INFO_REQ, pwd_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pbapi::PK_LOG_INFO_RSP, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pbapi::PK_LOG_INFO_RSP, errmsg_),
  PROTOBUF_FIELD_OFFSET(::pbapi::PK_LOG_INFO_RSP, facility_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pbapi::PK_LOG_SUBSCRIBE_REQ, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pbapi::PK_LOG_SUBSCRIBE_REQ, name_),
  PROTOBUF_FIELD_OFFSET(::pbapi::PK_LOG_SUBSCRIBE_REQ, pwd_),
  PROTOBUF_FIELD_OFFSET(::pbapi::PK_LOG_SUBSCRIBE_REQ, facility_),
  PROTOBUF_FIELD_OFFSET(::pbapi::PK_LOG_SUBSCRIBE_REQ, logaddr_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pbapi::PK_LOG_SUBSCRIBE_RSP, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pbapi::PK_LOG_SUBSCRIBE_RSP, errmsg_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pbapi::PK_LOG_PUBLISH_NOTICE, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pbapi::PK_LOG_PUBLISH_NOTICE, host_),
  PROTOBUF_FIELD_OFFSET(::pbapi::PK_LOG_PUBLISH_NOTICE, msg_),
  PROTOBUF_FIELD_OFFSET(::pbapi::PK_LOG_PUBLISH_NOTICE, timestamp_),
  PROTOBUF_FIELD_OFFSET(::pbapi::PK_LOG_PUBLISH_NOTICE, level_),
  PROTOBUF_FIELD_OFFSET(::pbapi::PK_LOG_PUBLISH_NOTICE, pid_),
  PROTOBUF_FIELD_OFFSET(::pbapi::PK_LOG_PUBLISH_NOTICE, file_),
  PROTOBUF_FIELD_OFFSET(::pbapi::PK_LOG_PUBLISH_NOTICE, funcname_),
  PROTOBUF_FIELD_OFFSET(::pbapi::PK_LOG_PUBLISH_NOTICE, line_),
  PROTOBUF_FIELD_OFFSET(::pbapi::PK_LOG_PUBLISH_NOTICE, facility_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::pbapi::PK_LOG_HEARTBEAT)},
  { 7, -1, sizeof(::pbapi::PK_LOG_INFO_REQ)},
  { 14, -1, sizeof(::pbapi::PK_LOG_INFO_RSP)},
  { 21, -1, sizeof(::pbapi::PK_LOG_SUBSCRIBE_REQ)},
  { 30, -1, sizeof(::pbapi::PK_LOG_SUBSCRIBE_RSP)},
  { 36, -1, sizeof(::pbapi::PK_LOG_PUBLISH_NOTICE)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pbapi::_PK_LOG_HEARTBEAT_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pbapi::_PK_LOG_INFO_REQ_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pbapi::_PK_LOG_INFO_RSP_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pbapi::_PK_LOG_SUBSCRIBE_REQ_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pbapi::_PK_LOG_SUBSCRIBE_RSP_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pbapi::_PK_LOG_PUBLISH_NOTICE_default_instance_),
};

const char descriptor_table_protodef_api_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\tapi.proto\022\005pbapi\"[\n\020PK_LOG_HEARTBEAT\022\014"
  "\n\004name\030\001 \001(\t\022\013\n\003pwd\030\002 \001(\t\",\n\021CMD_LOG_HEA"
  "RTBEAT\022\013\n\007UNKNOWN\020\000\022\n\n\003CMD\020\201\200\254P\"Y\n\017PK_LO"
  "G_INFO_REQ\022\014\n\004name\030\001 \001(\t\022\013\n\003pwd\030\002 \001(\t\"+\n"
  "\020CMD_LOG_INFO_REQ\022\013\n\007UNKNOWN\020\000\022\n\n\003CMD\020\201\200"
  "\254P\"`\n\017PK_LOG_INFO_RSP\022\016\n\006errmsg\030\001 \001(\t\022\020\n"
  "\010facility\030\002 \001(\t\"+\n\020CMD_LOG_INFO_RSP\022\013\n\007U"
  "NKNOWN\020\000\022\n\n\003CMD\020\201\200\250X\"\206\001\n\024PK_LOG_SUBSCRIB"
  "E_REQ\022\014\n\004name\030\001 \001(\t\022\013\n\003pwd\030\002 \001(\t\022\020\n\010faci"
  "lity\030\003 \001(\t\022\017\n\007logAddr\030\004 \001(\t\"0\n\025CMD_LOG_S"
  "UBSCRIBE_REQ\022\013\n\007UNKNOWN\020\000\022\n\n\003CMD\020\202\200\254P\"X\n"
  "\024PK_LOG_SUBSCRIBE_RSP\022\016\n\006errmsg\030\001 \001(\t\"0\n"
  "\025CMD_LOG_SUBSCRIBE_RSP\022\013\n\007UNKNOWN\020\000\022\n\n\003C"
  "MD\020\202\200\250X\"\324\001\n\025PK_LOG_PUBLISH_NOTICE\022\014\n\004hos"
  "t\030\001 \001(\t\022\013\n\003msg\030\002 \001(\t\022\021\n\ttimestamp\030\003 \001(\t\022"
  "\r\n\005level\030\004 \001(\005\022\013\n\003pid\030\005 \001(\005\022\014\n\004file\030\006 \001("
  "\t\022\020\n\010funcname\030\007 \001(\t\022\014\n\004line\030\010 \001(\005\022\020\n\010fac"
  "ility\030\t \001(\t\"1\n\026CMD_LOG_PUBLISH_NOTICE\022\013\n"
  "\007UNKNOWN\020\000\022\n\n\003CMD\020\203\200\250Xb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_api_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_api_2eproto_sccs[6] = {
  &scc_info_PK_LOG_HEARTBEAT_api_2eproto.base,
  &scc_info_PK_LOG_INFO_REQ_api_2eproto.base,
  &scc_info_PK_LOG_INFO_RSP_api_2eproto.base,
  &scc_info_PK_LOG_PUBLISH_NOTICE_api_2eproto.base,
  &scc_info_PK_LOG_SUBSCRIBE_REQ_api_2eproto.base,
  &scc_info_PK_LOG_SUBSCRIBE_RSP_api_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_api_2eproto_once;
static bool descriptor_table_api_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_api_2eproto = {
  &descriptor_table_api_2eproto_initialized, descriptor_table_protodef_api_2eproto, "api.proto", 750,
  &descriptor_table_api_2eproto_once, descriptor_table_api_2eproto_sccs, descriptor_table_api_2eproto_deps, 6, 0,
  schemas, file_default_instances, TableStruct_api_2eproto::offsets,
  file_level_metadata_api_2eproto, 6, file_level_enum_descriptors_api_2eproto, file_level_service_descriptors_api_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_api_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_api_2eproto), true);
namespace pbapi {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PK_LOG_HEARTBEAT_CMD_LOG_HEARTBEAT_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_api_2eproto);
  return file_level_enum_descriptors_api_2eproto[0];
}
bool PK_LOG_HEARTBEAT_CMD_LOG_HEARTBEAT_IsValid(int value) {
  switch (value) {
    case 0:
    case 168493057:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr PK_LOG_HEARTBEAT_CMD_LOG_HEARTBEAT PK_LOG_HEARTBEAT::UNKNOWN;
constexpr PK_LOG_HEARTBEAT_CMD_LOG_HEARTBEAT PK_LOG_HEARTBEAT::CMD;
constexpr PK_LOG_HEARTBEAT_CMD_LOG_HEARTBEAT PK_LOG_HEARTBEAT::CMD_LOG_HEARTBEAT_MIN;
constexpr PK_LOG_HEARTBEAT_CMD_LOG_HEARTBEAT PK_LOG_HEARTBEAT::CMD_LOG_HEARTBEAT_MAX;
constexpr int PK_LOG_HEARTBEAT::CMD_LOG_HEARTBEAT_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PK_LOG_INFO_REQ_CMD_LOG_INFO_REQ_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_api_2eproto);
  return file_level_enum_descriptors_api_2eproto[1];
}
bool PK_LOG_INFO_REQ_CMD_LOG_INFO_REQ_IsValid(int value) {
  switch (value) {
    case 0:
    case 168493057:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr PK_LOG_INFO_REQ_CMD_LOG_INFO_REQ PK_LOG_INFO_REQ::UNKNOWN;
constexpr PK_LOG_INFO_REQ_CMD_LOG_INFO_REQ PK_LOG_INFO_REQ::CMD;
constexpr PK_LOG_INFO_REQ_CMD_LOG_INFO_REQ PK_LOG_INFO_REQ::CMD_LOG_INFO_REQ_MIN;
constexpr PK_LOG_INFO_REQ_CMD_LOG_INFO_REQ PK_LOG_INFO_REQ::CMD_LOG_INFO_REQ_MAX;
constexpr int PK_LOG_INFO_REQ::CMD_LOG_INFO_REQ_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PK_LOG_INFO_RSP_CMD_LOG_INFO_RSP_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_api_2eproto);
  return file_level_enum_descriptors_api_2eproto[2];
}
bool PK_LOG_INFO_RSP_CMD_LOG_INFO_RSP_IsValid(int value) {
  switch (value) {
    case 0:
    case 185204737:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr PK_LOG_INFO_RSP_CMD_LOG_INFO_RSP PK_LOG_INFO_RSP::UNKNOWN;
constexpr PK_LOG_INFO_RSP_CMD_LOG_INFO_RSP PK_LOG_INFO_RSP::CMD;
constexpr PK_LOG_INFO_RSP_CMD_LOG_INFO_RSP PK_LOG_INFO_RSP::CMD_LOG_INFO_RSP_MIN;
constexpr PK_LOG_INFO_RSP_CMD_LOG_INFO_RSP PK_LOG_INFO_RSP::CMD_LOG_INFO_RSP_MAX;
constexpr int PK_LOG_INFO_RSP::CMD_LOG_INFO_RSP_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PK_LOG_SUBSCRIBE_REQ_CMD_LOG_SUBSCRIBE_REQ_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_api_2eproto);
  return file_level_enum_descriptors_api_2eproto[3];
}
bool PK_LOG_SUBSCRIBE_REQ_CMD_LOG_SUBSCRIBE_REQ_IsValid(int value) {
  switch (value) {
    case 0:
    case 168493058:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr PK_LOG_SUBSCRIBE_REQ_CMD_LOG_SUBSCRIBE_REQ PK_LOG_SUBSCRIBE_REQ::UNKNOWN;
constexpr PK_LOG_SUBSCRIBE_REQ_CMD_LOG_SUBSCRIBE_REQ PK_LOG_SUBSCRIBE_REQ::CMD;
constexpr PK_LOG_SUBSCRIBE_REQ_CMD_LOG_SUBSCRIBE_REQ PK_LOG_SUBSCRIBE_REQ::CMD_LOG_SUBSCRIBE_REQ_MIN;
constexpr PK_LOG_SUBSCRIBE_REQ_CMD_LOG_SUBSCRIBE_REQ PK_LOG_SUBSCRIBE_REQ::CMD_LOG_SUBSCRIBE_REQ_MAX;
constexpr int PK_LOG_SUBSCRIBE_REQ::CMD_LOG_SUBSCRIBE_REQ_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PK_LOG_SUBSCRIBE_RSP_CMD_LOG_SUBSCRIBE_RSP_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_api_2eproto);
  return file_level_enum_descriptors_api_2eproto[4];
}
bool PK_LOG_SUBSCRIBE_RSP_CMD_LOG_SUBSCRIBE_RSP_IsValid(int value) {
  switch (value) {
    case 0:
    case 185204738:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr PK_LOG_SUBSCRIBE_RSP_CMD_LOG_SUBSCRIBE_RSP PK_LOG_SUBSCRIBE_RSP::UNKNOWN;
constexpr PK_LOG_SUBSCRIBE_RSP_CMD_LOG_SUBSCRIBE_RSP PK_LOG_SUBSCRIBE_RSP::CMD;
constexpr PK_LOG_SUBSCRIBE_RSP_CMD_LOG_SUBSCRIBE_RSP PK_LOG_SUBSCRIBE_RSP::CMD_LOG_SUBSCRIBE_RSP_MIN;
constexpr PK_LOG_SUBSCRIBE_RSP_CMD_LOG_SUBSCRIBE_RSP PK_LOG_SUBSCRIBE_RSP::CMD_LOG_SUBSCRIBE_RSP_MAX;
constexpr int PK_LOG_SUBSCRIBE_RSP::CMD_LOG_SUBSCRIBE_RSP_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PK_LOG_PUBLISH_NOTICE_CMD_LOG_PUBLISH_NOTICE_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_api_2eproto);
  return file_level_enum_descriptors_api_2eproto[5];
}
bool PK_LOG_PUBLISH_NOTICE_CMD_LOG_PUBLISH_NOTICE_IsValid(int value) {
  switch (value) {
    case 0:
    case 185204739:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr PK_LOG_PUBLISH_NOTICE_CMD_LOG_PUBLISH_NOTICE PK_LOG_PUBLISH_NOTICE::UNKNOWN;
constexpr PK_LOG_PUBLISH_NOTICE_CMD_LOG_PUBLISH_NOTICE PK_LOG_PUBLISH_NOTICE::CMD;
constexpr PK_LOG_PUBLISH_NOTICE_CMD_LOG_PUBLISH_NOTICE PK_LOG_PUBLISH_NOTICE::CMD_LOG_PUBLISH_NOTICE_MIN;
constexpr PK_LOG_PUBLISH_NOTICE_CMD_LOG_PUBLISH_NOTICE PK_LOG_PUBLISH_NOTICE::CMD_LOG_PUBLISH_NOTICE_MAX;
constexpr int PK_LOG_PUBLISH_NOTICE::CMD_LOG_PUBLISH_NOTICE_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void PK_LOG_HEARTBEAT::InitAsDefaultInstance() {
}
class PK_LOG_HEARTBEAT::_Internal {
 public:
};

PK_LOG_HEARTBEAT::PK_LOG_HEARTBEAT()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pbapi.PK_LOG_HEARTBEAT)
}
PK_LOG_HEARTBEAT::PK_LOG_HEARTBEAT(const PK_LOG_HEARTBEAT& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  pwd_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_pwd().empty()) {
    pwd_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.pwd_);
  }
  // @@protoc_insertion_point(copy_constructor:pbapi.PK_LOG_HEARTBEAT)
}

void PK_LOG_HEARTBEAT::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PK_LOG_HEARTBEAT_api_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  pwd_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

PK_LOG_HEARTBEAT::~PK_LOG_HEARTBEAT() {
  // @@protoc_insertion_point(destructor:pbapi.PK_LOG_HEARTBEAT)
  SharedDtor();
}

void PK_LOG_HEARTBEAT::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  pwd_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PK_LOG_HEARTBEAT::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PK_LOG_HEARTBEAT& PK_LOG_HEARTBEAT::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PK_LOG_HEARTBEAT_api_2eproto.base);
  return *internal_default_instance();
}


void PK_LOG_HEARTBEAT::Clear() {
// @@protoc_insertion_point(message_clear_start:pbapi.PK_LOG_HEARTBEAT)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  pwd_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* PK_LOG_HEARTBEAT::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pbapi.PK_LOG_HEARTBEAT.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string pwd = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_pwd();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pbapi.PK_LOG_HEARTBEAT.pwd"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PK_LOG_HEARTBEAT::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbapi.PK_LOG_HEARTBEAT)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pbapi.PK_LOG_HEARTBEAT.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // string pwd = 2;
  if (this->pwd().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_pwd().data(), static_cast<int>(this->_internal_pwd().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pbapi.PK_LOG_HEARTBEAT.pwd");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_pwd(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbapi.PK_LOG_HEARTBEAT)
  return target;
}

size_t PK_LOG_HEARTBEAT::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbapi.PK_LOG_HEARTBEAT)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string pwd = 2;
  if (this->pwd().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_pwd());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PK_LOG_HEARTBEAT::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pbapi.PK_LOG_HEARTBEAT)
  GOOGLE_DCHECK_NE(&from, this);
  const PK_LOG_HEARTBEAT* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PK_LOG_HEARTBEAT>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pbapi.PK_LOG_HEARTBEAT)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pbapi.PK_LOG_HEARTBEAT)
    MergeFrom(*source);
  }
}

void PK_LOG_HEARTBEAT::MergeFrom(const PK_LOG_HEARTBEAT& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pbapi.PK_LOG_HEARTBEAT)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.pwd().size() > 0) {

    pwd_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.pwd_);
  }
}

void PK_LOG_HEARTBEAT::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pbapi.PK_LOG_HEARTBEAT)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PK_LOG_HEARTBEAT::CopyFrom(const PK_LOG_HEARTBEAT& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbapi.PK_LOG_HEARTBEAT)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PK_LOG_HEARTBEAT::IsInitialized() const {
  return true;
}

void PK_LOG_HEARTBEAT::InternalSwap(PK_LOG_HEARTBEAT* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  pwd_.Swap(&other->pwd_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata PK_LOG_HEARTBEAT::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PK_LOG_INFO_REQ::InitAsDefaultInstance() {
}
class PK_LOG_INFO_REQ::_Internal {
 public:
};

PK_LOG_INFO_REQ::PK_LOG_INFO_REQ()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pbapi.PK_LOG_INFO_REQ)
}
PK_LOG_INFO_REQ::PK_LOG_INFO_REQ(const PK_LOG_INFO_REQ& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  pwd_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_pwd().empty()) {
    pwd_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.pwd_);
  }
  // @@protoc_insertion_point(copy_constructor:pbapi.PK_LOG_INFO_REQ)
}

void PK_LOG_INFO_REQ::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PK_LOG_INFO_REQ_api_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  pwd_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

PK_LOG_INFO_REQ::~PK_LOG_INFO_REQ() {
  // @@protoc_insertion_point(destructor:pbapi.PK_LOG_INFO_REQ)
  SharedDtor();
}

void PK_LOG_INFO_REQ::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  pwd_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PK_LOG_INFO_REQ::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PK_LOG_INFO_REQ& PK_LOG_INFO_REQ::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PK_LOG_INFO_REQ_api_2eproto.base);
  return *internal_default_instance();
}


void PK_LOG_INFO_REQ::Clear() {
// @@protoc_insertion_point(message_clear_start:pbapi.PK_LOG_INFO_REQ)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  pwd_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* PK_LOG_INFO_REQ::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pbapi.PK_LOG_INFO_REQ.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string pwd = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_pwd();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pbapi.PK_LOG_INFO_REQ.pwd"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PK_LOG_INFO_REQ::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbapi.PK_LOG_INFO_REQ)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pbapi.PK_LOG_INFO_REQ.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // string pwd = 2;
  if (this->pwd().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_pwd().data(), static_cast<int>(this->_internal_pwd().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pbapi.PK_LOG_INFO_REQ.pwd");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_pwd(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbapi.PK_LOG_INFO_REQ)
  return target;
}

size_t PK_LOG_INFO_REQ::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbapi.PK_LOG_INFO_REQ)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string pwd = 2;
  if (this->pwd().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_pwd());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PK_LOG_INFO_REQ::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pbapi.PK_LOG_INFO_REQ)
  GOOGLE_DCHECK_NE(&from, this);
  const PK_LOG_INFO_REQ* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PK_LOG_INFO_REQ>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pbapi.PK_LOG_INFO_REQ)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pbapi.PK_LOG_INFO_REQ)
    MergeFrom(*source);
  }
}

void PK_LOG_INFO_REQ::MergeFrom(const PK_LOG_INFO_REQ& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pbapi.PK_LOG_INFO_REQ)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.pwd().size() > 0) {

    pwd_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.pwd_);
  }
}

void PK_LOG_INFO_REQ::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pbapi.PK_LOG_INFO_REQ)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PK_LOG_INFO_REQ::CopyFrom(const PK_LOG_INFO_REQ& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbapi.PK_LOG_INFO_REQ)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PK_LOG_INFO_REQ::IsInitialized() const {
  return true;
}

void PK_LOG_INFO_REQ::InternalSwap(PK_LOG_INFO_REQ* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  pwd_.Swap(&other->pwd_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata PK_LOG_INFO_REQ::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PK_LOG_INFO_RSP::InitAsDefaultInstance() {
}
class PK_LOG_INFO_RSP::_Internal {
 public:
};

PK_LOG_INFO_RSP::PK_LOG_INFO_RSP()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pbapi.PK_LOG_INFO_RSP)
}
PK_LOG_INFO_RSP::PK_LOG_INFO_RSP(const PK_LOG_INFO_RSP& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  errmsg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_errmsg().empty()) {
    errmsg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.errmsg_);
  }
  facility_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_facility().empty()) {
    facility_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.facility_);
  }
  // @@protoc_insertion_point(copy_constructor:pbapi.PK_LOG_INFO_RSP)
}

void PK_LOG_INFO_RSP::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PK_LOG_INFO_RSP_api_2eproto.base);
  errmsg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  facility_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

PK_LOG_INFO_RSP::~PK_LOG_INFO_RSP() {
  // @@protoc_insertion_point(destructor:pbapi.PK_LOG_INFO_RSP)
  SharedDtor();
}

void PK_LOG_INFO_RSP::SharedDtor() {
  errmsg_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  facility_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PK_LOG_INFO_RSP::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PK_LOG_INFO_RSP& PK_LOG_INFO_RSP::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PK_LOG_INFO_RSP_api_2eproto.base);
  return *internal_default_instance();
}


void PK_LOG_INFO_RSP::Clear() {
// @@protoc_insertion_point(message_clear_start:pbapi.PK_LOG_INFO_RSP)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  errmsg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  facility_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* PK_LOG_INFO_RSP::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string errmsg = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_errmsg();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pbapi.PK_LOG_INFO_RSP.errmsg"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string facility = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_facility();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pbapi.PK_LOG_INFO_RSP.facility"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PK_LOG_INFO_RSP::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbapi.PK_LOG_INFO_RSP)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string errmsg = 1;
  if (this->errmsg().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_errmsg().data(), static_cast<int>(this->_internal_errmsg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pbapi.PK_LOG_INFO_RSP.errmsg");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_errmsg(), target);
  }

  // string facility = 2;
  if (this->facility().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_facility().data(), static_cast<int>(this->_internal_facility().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pbapi.PK_LOG_INFO_RSP.facility");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_facility(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbapi.PK_LOG_INFO_RSP)
  return target;
}

size_t PK_LOG_INFO_RSP::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbapi.PK_LOG_INFO_RSP)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string errmsg = 1;
  if (this->errmsg().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_errmsg());
  }

  // string facility = 2;
  if (this->facility().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_facility());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PK_LOG_INFO_RSP::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pbapi.PK_LOG_INFO_RSP)
  GOOGLE_DCHECK_NE(&from, this);
  const PK_LOG_INFO_RSP* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PK_LOG_INFO_RSP>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pbapi.PK_LOG_INFO_RSP)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pbapi.PK_LOG_INFO_RSP)
    MergeFrom(*source);
  }
}

void PK_LOG_INFO_RSP::MergeFrom(const PK_LOG_INFO_RSP& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pbapi.PK_LOG_INFO_RSP)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.errmsg().size() > 0) {

    errmsg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.errmsg_);
  }
  if (from.facility().size() > 0) {

    facility_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.facility_);
  }
}

void PK_LOG_INFO_RSP::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pbapi.PK_LOG_INFO_RSP)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PK_LOG_INFO_RSP::CopyFrom(const PK_LOG_INFO_RSP& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbapi.PK_LOG_INFO_RSP)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PK_LOG_INFO_RSP::IsInitialized() const {
  return true;
}

void PK_LOG_INFO_RSP::InternalSwap(PK_LOG_INFO_RSP* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  errmsg_.Swap(&other->errmsg_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  facility_.Swap(&other->facility_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata PK_LOG_INFO_RSP::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PK_LOG_SUBSCRIBE_REQ::InitAsDefaultInstance() {
}
class PK_LOG_SUBSCRIBE_REQ::_Internal {
 public:
};

PK_LOG_SUBSCRIBE_REQ::PK_LOG_SUBSCRIBE_REQ()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pbapi.PK_LOG_SUBSCRIBE_REQ)
}
PK_LOG_SUBSCRIBE_REQ::PK_LOG_SUBSCRIBE_REQ(const PK_LOG_SUBSCRIBE_REQ& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  pwd_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_pwd().empty()) {
    pwd_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.pwd_);
  }
  facility_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_facility().empty()) {
    facility_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.facility_);
  }
  logaddr_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_logaddr().empty()) {
    logaddr_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.logaddr_);
  }
  // @@protoc_insertion_point(copy_constructor:pbapi.PK_LOG_SUBSCRIBE_REQ)
}

void PK_LOG_SUBSCRIBE_REQ::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PK_LOG_SUBSCRIBE_REQ_api_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  pwd_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  facility_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  logaddr_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

PK_LOG_SUBSCRIBE_REQ::~PK_LOG_SUBSCRIBE_REQ() {
  // @@protoc_insertion_point(destructor:pbapi.PK_LOG_SUBSCRIBE_REQ)
  SharedDtor();
}

void PK_LOG_SUBSCRIBE_REQ::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  pwd_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  facility_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  logaddr_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PK_LOG_SUBSCRIBE_REQ::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PK_LOG_SUBSCRIBE_REQ& PK_LOG_SUBSCRIBE_REQ::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PK_LOG_SUBSCRIBE_REQ_api_2eproto.base);
  return *internal_default_instance();
}


void PK_LOG_SUBSCRIBE_REQ::Clear() {
// @@protoc_insertion_point(message_clear_start:pbapi.PK_LOG_SUBSCRIBE_REQ)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  pwd_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  facility_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  logaddr_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* PK_LOG_SUBSCRIBE_REQ::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pbapi.PK_LOG_SUBSCRIBE_REQ.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string pwd = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_pwd();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pbapi.PK_LOG_SUBSCRIBE_REQ.pwd"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string facility = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_facility();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pbapi.PK_LOG_SUBSCRIBE_REQ.facility"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string logAddr = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_logaddr();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pbapi.PK_LOG_SUBSCRIBE_REQ.logAddr"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PK_LOG_SUBSCRIBE_REQ::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbapi.PK_LOG_SUBSCRIBE_REQ)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pbapi.PK_LOG_SUBSCRIBE_REQ.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // string pwd = 2;
  if (this->pwd().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_pwd().data(), static_cast<int>(this->_internal_pwd().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pbapi.PK_LOG_SUBSCRIBE_REQ.pwd");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_pwd(), target);
  }

  // string facility = 3;
  if (this->facility().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_facility().data(), static_cast<int>(this->_internal_facility().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pbapi.PK_LOG_SUBSCRIBE_REQ.facility");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_facility(), target);
  }

  // string logAddr = 4;
  if (this->logaddr().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_logaddr().data(), static_cast<int>(this->_internal_logaddr().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pbapi.PK_LOG_SUBSCRIBE_REQ.logAddr");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_logaddr(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbapi.PK_LOG_SUBSCRIBE_REQ)
  return target;
}

size_t PK_LOG_SUBSCRIBE_REQ::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbapi.PK_LOG_SUBSCRIBE_REQ)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string pwd = 2;
  if (this->pwd().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_pwd());
  }

  // string facility = 3;
  if (this->facility().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_facility());
  }

  // string logAddr = 4;
  if (this->logaddr().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_logaddr());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PK_LOG_SUBSCRIBE_REQ::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pbapi.PK_LOG_SUBSCRIBE_REQ)
  GOOGLE_DCHECK_NE(&from, this);
  const PK_LOG_SUBSCRIBE_REQ* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PK_LOG_SUBSCRIBE_REQ>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pbapi.PK_LOG_SUBSCRIBE_REQ)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pbapi.PK_LOG_SUBSCRIBE_REQ)
    MergeFrom(*source);
  }
}

void PK_LOG_SUBSCRIBE_REQ::MergeFrom(const PK_LOG_SUBSCRIBE_REQ& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pbapi.PK_LOG_SUBSCRIBE_REQ)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.pwd().size() > 0) {

    pwd_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.pwd_);
  }
  if (from.facility().size() > 0) {

    facility_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.facility_);
  }
  if (from.logaddr().size() > 0) {

    logaddr_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.logaddr_);
  }
}

void PK_LOG_SUBSCRIBE_REQ::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pbapi.PK_LOG_SUBSCRIBE_REQ)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PK_LOG_SUBSCRIBE_REQ::CopyFrom(const PK_LOG_SUBSCRIBE_REQ& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbapi.PK_LOG_SUBSCRIBE_REQ)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PK_LOG_SUBSCRIBE_REQ::IsInitialized() const {
  return true;
}

void PK_LOG_SUBSCRIBE_REQ::InternalSwap(PK_LOG_SUBSCRIBE_REQ* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  pwd_.Swap(&other->pwd_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  facility_.Swap(&other->facility_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  logaddr_.Swap(&other->logaddr_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata PK_LOG_SUBSCRIBE_REQ::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PK_LOG_SUBSCRIBE_RSP::InitAsDefaultInstance() {
}
class PK_LOG_SUBSCRIBE_RSP::_Internal {
 public:
};

PK_LOG_SUBSCRIBE_RSP::PK_LOG_SUBSCRIBE_RSP()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pbapi.PK_LOG_SUBSCRIBE_RSP)
}
PK_LOG_SUBSCRIBE_RSP::PK_LOG_SUBSCRIBE_RSP(const PK_LOG_SUBSCRIBE_RSP& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  errmsg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_errmsg().empty()) {
    errmsg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.errmsg_);
  }
  // @@protoc_insertion_point(copy_constructor:pbapi.PK_LOG_SUBSCRIBE_RSP)
}

void PK_LOG_SUBSCRIBE_RSP::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PK_LOG_SUBSCRIBE_RSP_api_2eproto.base);
  errmsg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

PK_LOG_SUBSCRIBE_RSP::~PK_LOG_SUBSCRIBE_RSP() {
  // @@protoc_insertion_point(destructor:pbapi.PK_LOG_SUBSCRIBE_RSP)
  SharedDtor();
}

void PK_LOG_SUBSCRIBE_RSP::SharedDtor() {
  errmsg_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PK_LOG_SUBSCRIBE_RSP::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PK_LOG_SUBSCRIBE_RSP& PK_LOG_SUBSCRIBE_RSP::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PK_LOG_SUBSCRIBE_RSP_api_2eproto.base);
  return *internal_default_instance();
}


void PK_LOG_SUBSCRIBE_RSP::Clear() {
// @@protoc_insertion_point(message_clear_start:pbapi.PK_LOG_SUBSCRIBE_RSP)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  errmsg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* PK_LOG_SUBSCRIBE_RSP::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string errmsg = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_errmsg();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pbapi.PK_LOG_SUBSCRIBE_RSP.errmsg"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PK_LOG_SUBSCRIBE_RSP::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbapi.PK_LOG_SUBSCRIBE_RSP)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string errmsg = 1;
  if (this->errmsg().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_errmsg().data(), static_cast<int>(this->_internal_errmsg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pbapi.PK_LOG_SUBSCRIBE_RSP.errmsg");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_errmsg(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbapi.PK_LOG_SUBSCRIBE_RSP)
  return target;
}

size_t PK_LOG_SUBSCRIBE_RSP::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbapi.PK_LOG_SUBSCRIBE_RSP)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string errmsg = 1;
  if (this->errmsg().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_errmsg());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PK_LOG_SUBSCRIBE_RSP::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pbapi.PK_LOG_SUBSCRIBE_RSP)
  GOOGLE_DCHECK_NE(&from, this);
  const PK_LOG_SUBSCRIBE_RSP* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PK_LOG_SUBSCRIBE_RSP>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pbapi.PK_LOG_SUBSCRIBE_RSP)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pbapi.PK_LOG_SUBSCRIBE_RSP)
    MergeFrom(*source);
  }
}

void PK_LOG_SUBSCRIBE_RSP::MergeFrom(const PK_LOG_SUBSCRIBE_RSP& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pbapi.PK_LOG_SUBSCRIBE_RSP)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.errmsg().size() > 0) {

    errmsg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.errmsg_);
  }
}

void PK_LOG_SUBSCRIBE_RSP::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pbapi.PK_LOG_SUBSCRIBE_RSP)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PK_LOG_SUBSCRIBE_RSP::CopyFrom(const PK_LOG_SUBSCRIBE_RSP& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbapi.PK_LOG_SUBSCRIBE_RSP)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PK_LOG_SUBSCRIBE_RSP::IsInitialized() const {
  return true;
}

void PK_LOG_SUBSCRIBE_RSP::InternalSwap(PK_LOG_SUBSCRIBE_RSP* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  errmsg_.Swap(&other->errmsg_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata PK_LOG_SUBSCRIBE_RSP::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PK_LOG_PUBLISH_NOTICE::InitAsDefaultInstance() {
}
class PK_LOG_PUBLISH_NOTICE::_Internal {
 public:
};

PK_LOG_PUBLISH_NOTICE::PK_LOG_PUBLISH_NOTICE()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pbapi.PK_LOG_PUBLISH_NOTICE)
}
PK_LOG_PUBLISH_NOTICE::PK_LOG_PUBLISH_NOTICE(const PK_LOG_PUBLISH_NOTICE& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  host_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_host().empty()) {
    host_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.host_);
  }
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_msg().empty()) {
    msg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
  timestamp_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_timestamp().empty()) {
    timestamp_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.timestamp_);
  }
  file_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_file().empty()) {
    file_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.file_);
  }
  funcname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_funcname().empty()) {
    funcname_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.funcname_);
  }
  facility_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_facility().empty()) {
    facility_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.facility_);
  }
  ::memcpy(&level_, &from.level_,
    static_cast<size_t>(reinterpret_cast<char*>(&line_) -
    reinterpret_cast<char*>(&level_)) + sizeof(line_));
  // @@protoc_insertion_point(copy_constructor:pbapi.PK_LOG_PUBLISH_NOTICE)
}

void PK_LOG_PUBLISH_NOTICE::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PK_LOG_PUBLISH_NOTICE_api_2eproto.base);
  host_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  timestamp_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  file_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  funcname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  facility_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&level_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&line_) -
      reinterpret_cast<char*>(&level_)) + sizeof(line_));
}

PK_LOG_PUBLISH_NOTICE::~PK_LOG_PUBLISH_NOTICE() {
  // @@protoc_insertion_point(destructor:pbapi.PK_LOG_PUBLISH_NOTICE)
  SharedDtor();
}

void PK_LOG_PUBLISH_NOTICE::SharedDtor() {
  host_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  msg_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  timestamp_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  file_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  funcname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  facility_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PK_LOG_PUBLISH_NOTICE::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PK_LOG_PUBLISH_NOTICE& PK_LOG_PUBLISH_NOTICE::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PK_LOG_PUBLISH_NOTICE_api_2eproto.base);
  return *internal_default_instance();
}


void PK_LOG_PUBLISH_NOTICE::Clear() {
// @@protoc_insertion_point(message_clear_start:pbapi.PK_LOG_PUBLISH_NOTICE)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  host_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  timestamp_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  file_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  funcname_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  facility_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&level_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&line_) -
      reinterpret_cast<char*>(&level_)) + sizeof(line_));
  _internal_metadata_.Clear();
}

const char* PK_LOG_PUBLISH_NOTICE::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string host = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_host();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pbapi.PK_LOG_PUBLISH_NOTICE.host"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string msg = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_msg();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pbapi.PK_LOG_PUBLISH_NOTICE.msg"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string timestamp = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_timestamp();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pbapi.PK_LOG_PUBLISH_NOTICE.timestamp"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 level = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 pid = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          pid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string file = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_file();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pbapi.PK_LOG_PUBLISH_NOTICE.file"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string funcname = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_funcname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pbapi.PK_LOG_PUBLISH_NOTICE.funcname"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 line = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          line_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string facility = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_facility();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pbapi.PK_LOG_PUBLISH_NOTICE.facility"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PK_LOG_PUBLISH_NOTICE::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbapi.PK_LOG_PUBLISH_NOTICE)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string host = 1;
  if (this->host().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_host().data(), static_cast<int>(this->_internal_host().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pbapi.PK_LOG_PUBLISH_NOTICE.host");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_host(), target);
  }

  // string msg = 2;
  if (this->msg().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_msg().data(), static_cast<int>(this->_internal_msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pbapi.PK_LOG_PUBLISH_NOTICE.msg");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_msg(), target);
  }

  // string timestamp = 3;
  if (this->timestamp().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_timestamp().data(), static_cast<int>(this->_internal_timestamp().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pbapi.PK_LOG_PUBLISH_NOTICE.timestamp");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_timestamp(), target);
  }

  // int32 level = 4;
  if (this->level() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_level(), target);
  }

  // int32 pid = 5;
  if (this->pid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_pid(), target);
  }

  // string file = 6;
  if (this->file().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_file().data(), static_cast<int>(this->_internal_file().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pbapi.PK_LOG_PUBLISH_NOTICE.file");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_file(), target);
  }

  // string funcname = 7;
  if (this->funcname().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_funcname().data(), static_cast<int>(this->_internal_funcname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pbapi.PK_LOG_PUBLISH_NOTICE.funcname");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_funcname(), target);
  }

  // int32 line = 8;
  if (this->line() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_line(), target);
  }

  // string facility = 9;
  if (this->facility().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_facility().data(), static_cast<int>(this->_internal_facility().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pbapi.PK_LOG_PUBLISH_NOTICE.facility");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_facility(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbapi.PK_LOG_PUBLISH_NOTICE)
  return target;
}

size_t PK_LOG_PUBLISH_NOTICE::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbapi.PK_LOG_PUBLISH_NOTICE)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string host = 1;
  if (this->host().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_host());
  }

  // string msg = 2;
  if (this->msg().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_msg());
  }

  // string timestamp = 3;
  if (this->timestamp().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_timestamp());
  }

  // string file = 6;
  if (this->file().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_file());
  }

  // string funcname = 7;
  if (this->funcname().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_funcname());
  }

  // string facility = 9;
  if (this->facility().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_facility());
  }

  // int32 level = 4;
  if (this->level() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_level());
  }

  // int32 pid = 5;
  if (this->pid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_pid());
  }

  // int32 line = 8;
  if (this->line() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_line());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PK_LOG_PUBLISH_NOTICE::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pbapi.PK_LOG_PUBLISH_NOTICE)
  GOOGLE_DCHECK_NE(&from, this);
  const PK_LOG_PUBLISH_NOTICE* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PK_LOG_PUBLISH_NOTICE>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pbapi.PK_LOG_PUBLISH_NOTICE)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pbapi.PK_LOG_PUBLISH_NOTICE)
    MergeFrom(*source);
  }
}

void PK_LOG_PUBLISH_NOTICE::MergeFrom(const PK_LOG_PUBLISH_NOTICE& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pbapi.PK_LOG_PUBLISH_NOTICE)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.host().size() > 0) {

    host_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.host_);
  }
  if (from.msg().size() > 0) {

    msg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
  if (from.timestamp().size() > 0) {

    timestamp_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.timestamp_);
  }
  if (from.file().size() > 0) {

    file_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.file_);
  }
  if (from.funcname().size() > 0) {

    funcname_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.funcname_);
  }
  if (from.facility().size() > 0) {

    facility_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.facility_);
  }
  if (from.level() != 0) {
    _internal_set_level(from._internal_level());
  }
  if (from.pid() != 0) {
    _internal_set_pid(from._internal_pid());
  }
  if (from.line() != 0) {
    _internal_set_line(from._internal_line());
  }
}

void PK_LOG_PUBLISH_NOTICE::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pbapi.PK_LOG_PUBLISH_NOTICE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PK_LOG_PUBLISH_NOTICE::CopyFrom(const PK_LOG_PUBLISH_NOTICE& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbapi.PK_LOG_PUBLISH_NOTICE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PK_LOG_PUBLISH_NOTICE::IsInitialized() const {
  return true;
}

void PK_LOG_PUBLISH_NOTICE::InternalSwap(PK_LOG_PUBLISH_NOTICE* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  host_.Swap(&other->host_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  msg_.Swap(&other->msg_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  timestamp_.Swap(&other->timestamp_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  file_.Swap(&other->file_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  funcname_.Swap(&other->funcname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  facility_.Swap(&other->facility_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(level_, other->level_);
  swap(pid_, other->pid_);
  swap(line_, other->line_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PK_LOG_PUBLISH_NOTICE::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace pbapi
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::pbapi::PK_LOG_HEARTBEAT* Arena::CreateMaybeMessage< ::pbapi::PK_LOG_HEARTBEAT >(Arena* arena) {
  return Arena::CreateInternal< ::pbapi::PK_LOG_HEARTBEAT >(arena);
}
template<> PROTOBUF_NOINLINE ::pbapi::PK_LOG_INFO_REQ* Arena::CreateMaybeMessage< ::pbapi::PK_LOG_INFO_REQ >(Arena* arena) {
  return Arena::CreateInternal< ::pbapi::PK_LOG_INFO_REQ >(arena);
}
template<> PROTOBUF_NOINLINE ::pbapi::PK_LOG_INFO_RSP* Arena::CreateMaybeMessage< ::pbapi::PK_LOG_INFO_RSP >(Arena* arena) {
  return Arena::CreateInternal< ::pbapi::PK_LOG_INFO_RSP >(arena);
}
template<> PROTOBUF_NOINLINE ::pbapi::PK_LOG_SUBSCRIBE_REQ* Arena::CreateMaybeMessage< ::pbapi::PK_LOG_SUBSCRIBE_REQ >(Arena* arena) {
  return Arena::CreateInternal< ::pbapi::PK_LOG_SUBSCRIBE_REQ >(arena);
}
template<> PROTOBUF_NOINLINE ::pbapi::PK_LOG_SUBSCRIBE_RSP* Arena::CreateMaybeMessage< ::pbapi::PK_LOG_SUBSCRIBE_RSP >(Arena* arena) {
  return Arena::CreateInternal< ::pbapi::PK_LOG_SUBSCRIBE_RSP >(arena);
}
template<> PROTOBUF_NOINLINE ::pbapi::PK_LOG_PUBLISH_NOTICE* Arena::CreateMaybeMessage< ::pbapi::PK_LOG_PUBLISH_NOTICE >(Arena* arena) {
  return Arena::CreateInternal< ::pbapi::PK_LOG_PUBLISH_NOTICE >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
