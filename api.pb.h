// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: api.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_api_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_api_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_api_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_api_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[6]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_api_2eproto;
namespace pbapi {
class PK_LOG_HEARTBEAT;
class PK_LOG_HEARTBEATDefaultTypeInternal;
extern PK_LOG_HEARTBEATDefaultTypeInternal _PK_LOG_HEARTBEAT_default_instance_;
class PK_LOG_INFO_REQ;
class PK_LOG_INFO_REQDefaultTypeInternal;
extern PK_LOG_INFO_REQDefaultTypeInternal _PK_LOG_INFO_REQ_default_instance_;
class PK_LOG_INFO_RSP;
class PK_LOG_INFO_RSPDefaultTypeInternal;
extern PK_LOG_INFO_RSPDefaultTypeInternal _PK_LOG_INFO_RSP_default_instance_;
class PK_LOG_PUBLISH_NOTICE;
class PK_LOG_PUBLISH_NOTICEDefaultTypeInternal;
extern PK_LOG_PUBLISH_NOTICEDefaultTypeInternal _PK_LOG_PUBLISH_NOTICE_default_instance_;
class PK_LOG_SUBSCRIBE_REQ;
class PK_LOG_SUBSCRIBE_REQDefaultTypeInternal;
extern PK_LOG_SUBSCRIBE_REQDefaultTypeInternal _PK_LOG_SUBSCRIBE_REQ_default_instance_;
class PK_LOG_SUBSCRIBE_RSP;
class PK_LOG_SUBSCRIBE_RSPDefaultTypeInternal;
extern PK_LOG_SUBSCRIBE_RSPDefaultTypeInternal _PK_LOG_SUBSCRIBE_RSP_default_instance_;
}  // namespace pbapi
PROTOBUF_NAMESPACE_OPEN
template<> ::pbapi::PK_LOG_HEARTBEAT* Arena::CreateMaybeMessage<::pbapi::PK_LOG_HEARTBEAT>(Arena*);
template<> ::pbapi::PK_LOG_INFO_REQ* Arena::CreateMaybeMessage<::pbapi::PK_LOG_INFO_REQ>(Arena*);
template<> ::pbapi::PK_LOG_INFO_RSP* Arena::CreateMaybeMessage<::pbapi::PK_LOG_INFO_RSP>(Arena*);
template<> ::pbapi::PK_LOG_PUBLISH_NOTICE* Arena::CreateMaybeMessage<::pbapi::PK_LOG_PUBLISH_NOTICE>(Arena*);
template<> ::pbapi::PK_LOG_SUBSCRIBE_REQ* Arena::CreateMaybeMessage<::pbapi::PK_LOG_SUBSCRIBE_REQ>(Arena*);
template<> ::pbapi::PK_LOG_SUBSCRIBE_RSP* Arena::CreateMaybeMessage<::pbapi::PK_LOG_SUBSCRIBE_RSP>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace pbapi {

enum PK_LOG_HEARTBEAT_CMD_LOG_HEARTBEAT : int {
  PK_LOG_HEARTBEAT_CMD_LOG_HEARTBEAT_UNKNOWN = 0,
  PK_LOG_HEARTBEAT_CMD_LOG_HEARTBEAT_CMD = 168493057,
  PK_LOG_HEARTBEAT_CMD_LOG_HEARTBEAT_PK_LOG_HEARTBEAT_CMD_LOG_HEARTBEAT_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  PK_LOG_HEARTBEAT_CMD_LOG_HEARTBEAT_PK_LOG_HEARTBEAT_CMD_LOG_HEARTBEAT_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool PK_LOG_HEARTBEAT_CMD_LOG_HEARTBEAT_IsValid(int value);
constexpr PK_LOG_HEARTBEAT_CMD_LOG_HEARTBEAT PK_LOG_HEARTBEAT_CMD_LOG_HEARTBEAT_CMD_LOG_HEARTBEAT_MIN = PK_LOG_HEARTBEAT_CMD_LOG_HEARTBEAT_UNKNOWN;
constexpr PK_LOG_HEARTBEAT_CMD_LOG_HEARTBEAT PK_LOG_HEARTBEAT_CMD_LOG_HEARTBEAT_CMD_LOG_HEARTBEAT_MAX = PK_LOG_HEARTBEAT_CMD_LOG_HEARTBEAT_CMD;
constexpr int PK_LOG_HEARTBEAT_CMD_LOG_HEARTBEAT_CMD_LOG_HEARTBEAT_ARRAYSIZE = PK_LOG_HEARTBEAT_CMD_LOG_HEARTBEAT_CMD_LOG_HEARTBEAT_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PK_LOG_HEARTBEAT_CMD_LOG_HEARTBEAT_descriptor();
template<typename T>
inline const std::string& PK_LOG_HEARTBEAT_CMD_LOG_HEARTBEAT_Name(T enum_t_value) {
  static_assert(::std::is_same<T, PK_LOG_HEARTBEAT_CMD_LOG_HEARTBEAT>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function PK_LOG_HEARTBEAT_CMD_LOG_HEARTBEAT_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    PK_LOG_HEARTBEAT_CMD_LOG_HEARTBEAT_descriptor(), enum_t_value);
}
inline bool PK_LOG_HEARTBEAT_CMD_LOG_HEARTBEAT_Parse(
    const std::string& name, PK_LOG_HEARTBEAT_CMD_LOG_HEARTBEAT* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<PK_LOG_HEARTBEAT_CMD_LOG_HEARTBEAT>(
    PK_LOG_HEARTBEAT_CMD_LOG_HEARTBEAT_descriptor(), name, value);
}
enum PK_LOG_INFO_REQ_CMD_LOG_INFO_REQ : int {
  PK_LOG_INFO_REQ_CMD_LOG_INFO_REQ_UNKNOWN = 0,
  PK_LOG_INFO_REQ_CMD_LOG_INFO_REQ_CMD = 168493057,
  PK_LOG_INFO_REQ_CMD_LOG_INFO_REQ_PK_LOG_INFO_REQ_CMD_LOG_INFO_REQ_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  PK_LOG_INFO_REQ_CMD_LOG_INFO_REQ_PK_LOG_INFO_REQ_CMD_LOG_INFO_REQ_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool PK_LOG_INFO_REQ_CMD_LOG_INFO_REQ_IsValid(int value);
constexpr PK_LOG_INFO_REQ_CMD_LOG_INFO_REQ PK_LOG_INFO_REQ_CMD_LOG_INFO_REQ_CMD_LOG_INFO_REQ_MIN = PK_LOG_INFO_REQ_CMD_LOG_INFO_REQ_UNKNOWN;
constexpr PK_LOG_INFO_REQ_CMD_LOG_INFO_REQ PK_LOG_INFO_REQ_CMD_LOG_INFO_REQ_CMD_LOG_INFO_REQ_MAX = PK_LOG_INFO_REQ_CMD_LOG_INFO_REQ_CMD;
constexpr int PK_LOG_INFO_REQ_CMD_LOG_INFO_REQ_CMD_LOG_INFO_REQ_ARRAYSIZE = PK_LOG_INFO_REQ_CMD_LOG_INFO_REQ_CMD_LOG_INFO_REQ_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PK_LOG_INFO_REQ_CMD_LOG_INFO_REQ_descriptor();
template<typename T>
inline const std::string& PK_LOG_INFO_REQ_CMD_LOG_INFO_REQ_Name(T enum_t_value) {
  static_assert(::std::is_same<T, PK_LOG_INFO_REQ_CMD_LOG_INFO_REQ>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function PK_LOG_INFO_REQ_CMD_LOG_INFO_REQ_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    PK_LOG_INFO_REQ_CMD_LOG_INFO_REQ_descriptor(), enum_t_value);
}
inline bool PK_LOG_INFO_REQ_CMD_LOG_INFO_REQ_Parse(
    const std::string& name, PK_LOG_INFO_REQ_CMD_LOG_INFO_REQ* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<PK_LOG_INFO_REQ_CMD_LOG_INFO_REQ>(
    PK_LOG_INFO_REQ_CMD_LOG_INFO_REQ_descriptor(), name, value);
}
enum PK_LOG_INFO_RSP_CMD_LOG_INFO_RSP : int {
  PK_LOG_INFO_RSP_CMD_LOG_INFO_RSP_UNKNOWN = 0,
  PK_LOG_INFO_RSP_CMD_LOG_INFO_RSP_CMD = 185204737,
  PK_LOG_INFO_RSP_CMD_LOG_INFO_RSP_PK_LOG_INFO_RSP_CMD_LOG_INFO_RSP_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  PK_LOG_INFO_RSP_CMD_LOG_INFO_RSP_PK_LOG_INFO_RSP_CMD_LOG_INFO_RSP_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool PK_LOG_INFO_RSP_CMD_LOG_INFO_RSP_IsValid(int value);
constexpr PK_LOG_INFO_RSP_CMD_LOG_INFO_RSP PK_LOG_INFO_RSP_CMD_LOG_INFO_RSP_CMD_LOG_INFO_RSP_MIN = PK_LOG_INFO_RSP_CMD_LOG_INFO_RSP_UNKNOWN;
constexpr PK_LOG_INFO_RSP_CMD_LOG_INFO_RSP PK_LOG_INFO_RSP_CMD_LOG_INFO_RSP_CMD_LOG_INFO_RSP_MAX = PK_LOG_INFO_RSP_CMD_LOG_INFO_RSP_CMD;
constexpr int PK_LOG_INFO_RSP_CMD_LOG_INFO_RSP_CMD_LOG_INFO_RSP_ARRAYSIZE = PK_LOG_INFO_RSP_CMD_LOG_INFO_RSP_CMD_LOG_INFO_RSP_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PK_LOG_INFO_RSP_CMD_LOG_INFO_RSP_descriptor();
template<typename T>
inline const std::string& PK_LOG_INFO_RSP_CMD_LOG_INFO_RSP_Name(T enum_t_value) {
  static_assert(::std::is_same<T, PK_LOG_INFO_RSP_CMD_LOG_INFO_RSP>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function PK_LOG_INFO_RSP_CMD_LOG_INFO_RSP_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    PK_LOG_INFO_RSP_CMD_LOG_INFO_RSP_descriptor(), enum_t_value);
}
inline bool PK_LOG_INFO_RSP_CMD_LOG_INFO_RSP_Parse(
    const std::string& name, PK_LOG_INFO_RSP_CMD_LOG_INFO_RSP* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<PK_LOG_INFO_RSP_CMD_LOG_INFO_RSP>(
    PK_LOG_INFO_RSP_CMD_LOG_INFO_RSP_descriptor(), name, value);
}
enum PK_LOG_SUBSCRIBE_REQ_CMD_LOG_SUBSCRIBE_REQ : int {
  PK_LOG_SUBSCRIBE_REQ_CMD_LOG_SUBSCRIBE_REQ_UNKNOWN = 0,
  PK_LOG_SUBSCRIBE_REQ_CMD_LOG_SUBSCRIBE_REQ_CMD = 168493058,
  PK_LOG_SUBSCRIBE_REQ_CMD_LOG_SUBSCRIBE_REQ_PK_LOG_SUBSCRIBE_REQ_CMD_LOG_SUBSCRIBE_REQ_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  PK_LOG_SUBSCRIBE_REQ_CMD_LOG_SUBSCRIBE_REQ_PK_LOG_SUBSCRIBE_REQ_CMD_LOG_SUBSCRIBE_REQ_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool PK_LOG_SUBSCRIBE_REQ_CMD_LOG_SUBSCRIBE_REQ_IsValid(int value);
constexpr PK_LOG_SUBSCRIBE_REQ_CMD_LOG_SUBSCRIBE_REQ PK_LOG_SUBSCRIBE_REQ_CMD_LOG_SUBSCRIBE_REQ_CMD_LOG_SUBSCRIBE_REQ_MIN = PK_LOG_SUBSCRIBE_REQ_CMD_LOG_SUBSCRIBE_REQ_UNKNOWN;
constexpr PK_LOG_SUBSCRIBE_REQ_CMD_LOG_SUBSCRIBE_REQ PK_LOG_SUBSCRIBE_REQ_CMD_LOG_SUBSCRIBE_REQ_CMD_LOG_SUBSCRIBE_REQ_MAX = PK_LOG_SUBSCRIBE_REQ_CMD_LOG_SUBSCRIBE_REQ_CMD;
constexpr int PK_LOG_SUBSCRIBE_REQ_CMD_LOG_SUBSCRIBE_REQ_CMD_LOG_SUBSCRIBE_REQ_ARRAYSIZE = PK_LOG_SUBSCRIBE_REQ_CMD_LOG_SUBSCRIBE_REQ_CMD_LOG_SUBSCRIBE_REQ_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PK_LOG_SUBSCRIBE_REQ_CMD_LOG_SUBSCRIBE_REQ_descriptor();
template<typename T>
inline const std::string& PK_LOG_SUBSCRIBE_REQ_CMD_LOG_SUBSCRIBE_REQ_Name(T enum_t_value) {
  static_assert(::std::is_same<T, PK_LOG_SUBSCRIBE_REQ_CMD_LOG_SUBSCRIBE_REQ>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function PK_LOG_SUBSCRIBE_REQ_CMD_LOG_SUBSCRIBE_REQ_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    PK_LOG_SUBSCRIBE_REQ_CMD_LOG_SUBSCRIBE_REQ_descriptor(), enum_t_value);
}
inline bool PK_LOG_SUBSCRIBE_REQ_CMD_LOG_SUBSCRIBE_REQ_Parse(
    const std::string& name, PK_LOG_SUBSCRIBE_REQ_CMD_LOG_SUBSCRIBE_REQ* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<PK_LOG_SUBSCRIBE_REQ_CMD_LOG_SUBSCRIBE_REQ>(
    PK_LOG_SUBSCRIBE_REQ_CMD_LOG_SUBSCRIBE_REQ_descriptor(), name, value);
}
enum PK_LOG_SUBSCRIBE_RSP_CMD_LOG_SUBSCRIBE_RSP : int {
  PK_LOG_SUBSCRIBE_RSP_CMD_LOG_SUBSCRIBE_RSP_UNKNOWN = 0,
  PK_LOG_SUBSCRIBE_RSP_CMD_LOG_SUBSCRIBE_RSP_CMD = 185204738,
  PK_LOG_SUBSCRIBE_RSP_CMD_LOG_SUBSCRIBE_RSP_PK_LOG_SUBSCRIBE_RSP_CMD_LOG_SUBSCRIBE_RSP_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  PK_LOG_SUBSCRIBE_RSP_CMD_LOG_SUBSCRIBE_RSP_PK_LOG_SUBSCRIBE_RSP_CMD_LOG_SUBSCRIBE_RSP_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool PK_LOG_SUBSCRIBE_RSP_CMD_LOG_SUBSCRIBE_RSP_IsValid(int value);
constexpr PK_LOG_SUBSCRIBE_RSP_CMD_LOG_SUBSCRIBE_RSP PK_LOG_SUBSCRIBE_RSP_CMD_LOG_SUBSCRIBE_RSP_CMD_LOG_SUBSCRIBE_RSP_MIN = PK_LOG_SUBSCRIBE_RSP_CMD_LOG_SUBSCRIBE_RSP_UNKNOWN;
constexpr PK_LOG_SUBSCRIBE_RSP_CMD_LOG_SUBSCRIBE_RSP PK_LOG_SUBSCRIBE_RSP_CMD_LOG_SUBSCRIBE_RSP_CMD_LOG_SUBSCRIBE_RSP_MAX = PK_LOG_SUBSCRIBE_RSP_CMD_LOG_SUBSCRIBE_RSP_CMD;
constexpr int PK_LOG_SUBSCRIBE_RSP_CMD_LOG_SUBSCRIBE_RSP_CMD_LOG_SUBSCRIBE_RSP_ARRAYSIZE = PK_LOG_SUBSCRIBE_RSP_CMD_LOG_SUBSCRIBE_RSP_CMD_LOG_SUBSCRIBE_RSP_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PK_LOG_SUBSCRIBE_RSP_CMD_LOG_SUBSCRIBE_RSP_descriptor();
template<typename T>
inline const std::string& PK_LOG_SUBSCRIBE_RSP_CMD_LOG_SUBSCRIBE_RSP_Name(T enum_t_value) {
  static_assert(::std::is_same<T, PK_LOG_SUBSCRIBE_RSP_CMD_LOG_SUBSCRIBE_RSP>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function PK_LOG_SUBSCRIBE_RSP_CMD_LOG_SUBSCRIBE_RSP_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    PK_LOG_SUBSCRIBE_RSP_CMD_LOG_SUBSCRIBE_RSP_descriptor(), enum_t_value);
}
inline bool PK_LOG_SUBSCRIBE_RSP_CMD_LOG_SUBSCRIBE_RSP_Parse(
    const std::string& name, PK_LOG_SUBSCRIBE_RSP_CMD_LOG_SUBSCRIBE_RSP* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<PK_LOG_SUBSCRIBE_RSP_CMD_LOG_SUBSCRIBE_RSP>(
    PK_LOG_SUBSCRIBE_RSP_CMD_LOG_SUBSCRIBE_RSP_descriptor(), name, value);
}
enum PK_LOG_PUBLISH_NOTICE_CMD_LOG_PUBLISH_NOTICE : int {
  PK_LOG_PUBLISH_NOTICE_CMD_LOG_PUBLISH_NOTICE_UNKNOWN = 0,
  PK_LOG_PUBLISH_NOTICE_CMD_LOG_PUBLISH_NOTICE_CMD = 185204739,
  PK_LOG_PUBLISH_NOTICE_CMD_LOG_PUBLISH_NOTICE_PK_LOG_PUBLISH_NOTICE_CMD_LOG_PUBLISH_NOTICE_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  PK_LOG_PUBLISH_NOTICE_CMD_LOG_PUBLISH_NOTICE_PK_LOG_PUBLISH_NOTICE_CMD_LOG_PUBLISH_NOTICE_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool PK_LOG_PUBLISH_NOTICE_CMD_LOG_PUBLISH_NOTICE_IsValid(int value);
constexpr PK_LOG_PUBLISH_NOTICE_CMD_LOG_PUBLISH_NOTICE PK_LOG_PUBLISH_NOTICE_CMD_LOG_PUBLISH_NOTICE_CMD_LOG_PUBLISH_NOTICE_MIN = PK_LOG_PUBLISH_NOTICE_CMD_LOG_PUBLISH_NOTICE_UNKNOWN;
constexpr PK_LOG_PUBLISH_NOTICE_CMD_LOG_PUBLISH_NOTICE PK_LOG_PUBLISH_NOTICE_CMD_LOG_PUBLISH_NOTICE_CMD_LOG_PUBLISH_NOTICE_MAX = PK_LOG_PUBLISH_NOTICE_CMD_LOG_PUBLISH_NOTICE_CMD;
constexpr int PK_LOG_PUBLISH_NOTICE_CMD_LOG_PUBLISH_NOTICE_CMD_LOG_PUBLISH_NOTICE_ARRAYSIZE = PK_LOG_PUBLISH_NOTICE_CMD_LOG_PUBLISH_NOTICE_CMD_LOG_PUBLISH_NOTICE_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PK_LOG_PUBLISH_NOTICE_CMD_LOG_PUBLISH_NOTICE_descriptor();
template<typename T>
inline const std::string& PK_LOG_PUBLISH_NOTICE_CMD_LOG_PUBLISH_NOTICE_Name(T enum_t_value) {
  static_assert(::std::is_same<T, PK_LOG_PUBLISH_NOTICE_CMD_LOG_PUBLISH_NOTICE>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function PK_LOG_PUBLISH_NOTICE_CMD_LOG_PUBLISH_NOTICE_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    PK_LOG_PUBLISH_NOTICE_CMD_LOG_PUBLISH_NOTICE_descriptor(), enum_t_value);
}
inline bool PK_LOG_PUBLISH_NOTICE_CMD_LOG_PUBLISH_NOTICE_Parse(
    const std::string& name, PK_LOG_PUBLISH_NOTICE_CMD_LOG_PUBLISH_NOTICE* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<PK_LOG_PUBLISH_NOTICE_CMD_LOG_PUBLISH_NOTICE>(
    PK_LOG_PUBLISH_NOTICE_CMD_LOG_PUBLISH_NOTICE_descriptor(), name, value);
}
// ===================================================================

class PK_LOG_HEARTBEAT :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pbapi.PK_LOG_HEARTBEAT) */ {
 public:
  PK_LOG_HEARTBEAT();
  virtual ~PK_LOG_HEARTBEAT();

  PK_LOG_HEARTBEAT(const PK_LOG_HEARTBEAT& from);
  PK_LOG_HEARTBEAT(PK_LOG_HEARTBEAT&& from) noexcept
    : PK_LOG_HEARTBEAT() {
    *this = ::std::move(from);
  }

  inline PK_LOG_HEARTBEAT& operator=(const PK_LOG_HEARTBEAT& from) {
    CopyFrom(from);
    return *this;
  }
  inline PK_LOG_HEARTBEAT& operator=(PK_LOG_HEARTBEAT&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PK_LOG_HEARTBEAT& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PK_LOG_HEARTBEAT* internal_default_instance() {
    return reinterpret_cast<const PK_LOG_HEARTBEAT*>(
               &_PK_LOG_HEARTBEAT_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(PK_LOG_HEARTBEAT& a, PK_LOG_HEARTBEAT& b) {
    a.Swap(&b);
  }
  inline void Swap(PK_LOG_HEARTBEAT* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PK_LOG_HEARTBEAT* New() const final {
    return CreateMaybeMessage<PK_LOG_HEARTBEAT>(nullptr);
  }

  PK_LOG_HEARTBEAT* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PK_LOG_HEARTBEAT>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PK_LOG_HEARTBEAT& from);
  void MergeFrom(const PK_LOG_HEARTBEAT& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PK_LOG_HEARTBEAT* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pbapi.PK_LOG_HEARTBEAT";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2eproto);
    return ::descriptor_table_api_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef PK_LOG_HEARTBEAT_CMD_LOG_HEARTBEAT CMD_LOG_HEARTBEAT;
  static constexpr CMD_LOG_HEARTBEAT UNKNOWN =
    PK_LOG_HEARTBEAT_CMD_LOG_HEARTBEAT_UNKNOWN;
  static constexpr CMD_LOG_HEARTBEAT CMD =
    PK_LOG_HEARTBEAT_CMD_LOG_HEARTBEAT_CMD;
  static inline bool CMD_LOG_HEARTBEAT_IsValid(int value) {
    return PK_LOG_HEARTBEAT_CMD_LOG_HEARTBEAT_IsValid(value);
  }
  static constexpr CMD_LOG_HEARTBEAT CMD_LOG_HEARTBEAT_MIN =
    PK_LOG_HEARTBEAT_CMD_LOG_HEARTBEAT_CMD_LOG_HEARTBEAT_MIN;
  static constexpr CMD_LOG_HEARTBEAT CMD_LOG_HEARTBEAT_MAX =
    PK_LOG_HEARTBEAT_CMD_LOG_HEARTBEAT_CMD_LOG_HEARTBEAT_MAX;
  static constexpr int CMD_LOG_HEARTBEAT_ARRAYSIZE =
    PK_LOG_HEARTBEAT_CMD_LOG_HEARTBEAT_CMD_LOG_HEARTBEAT_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  CMD_LOG_HEARTBEAT_descriptor() {
    return PK_LOG_HEARTBEAT_CMD_LOG_HEARTBEAT_descriptor();
  }
  template<typename T>
  static inline const std::string& CMD_LOG_HEARTBEAT_Name(T enum_t_value) {
    static_assert(::std::is_same<T, CMD_LOG_HEARTBEAT>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function CMD_LOG_HEARTBEAT_Name.");
    return PK_LOG_HEARTBEAT_CMD_LOG_HEARTBEAT_Name(enum_t_value);
  }
  static inline bool CMD_LOG_HEARTBEAT_Parse(const std::string& name,
      CMD_LOG_HEARTBEAT* value) {
    return PK_LOG_HEARTBEAT_CMD_LOG_HEARTBEAT_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kPwdFieldNumber = 2,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string pwd = 2;
  void clear_pwd();
  const std::string& pwd() const;
  void set_pwd(const std::string& value);
  void set_pwd(std::string&& value);
  void set_pwd(const char* value);
  void set_pwd(const char* value, size_t size);
  std::string* mutable_pwd();
  std::string* release_pwd();
  void set_allocated_pwd(std::string* pwd);
  private:
  const std::string& _internal_pwd() const;
  void _internal_set_pwd(const std::string& value);
  std::string* _internal_mutable_pwd();
  public:

  // @@protoc_insertion_point(class_scope:pbapi.PK_LOG_HEARTBEAT)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pwd_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2eproto;
};
// -------------------------------------------------------------------

class PK_LOG_INFO_REQ :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pbapi.PK_LOG_INFO_REQ) */ {
 public:
  PK_LOG_INFO_REQ();
  virtual ~PK_LOG_INFO_REQ();

  PK_LOG_INFO_REQ(const PK_LOG_INFO_REQ& from);
  PK_LOG_INFO_REQ(PK_LOG_INFO_REQ&& from) noexcept
    : PK_LOG_INFO_REQ() {
    *this = ::std::move(from);
  }

  inline PK_LOG_INFO_REQ& operator=(const PK_LOG_INFO_REQ& from) {
    CopyFrom(from);
    return *this;
  }
  inline PK_LOG_INFO_REQ& operator=(PK_LOG_INFO_REQ&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PK_LOG_INFO_REQ& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PK_LOG_INFO_REQ* internal_default_instance() {
    return reinterpret_cast<const PK_LOG_INFO_REQ*>(
               &_PK_LOG_INFO_REQ_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(PK_LOG_INFO_REQ& a, PK_LOG_INFO_REQ& b) {
    a.Swap(&b);
  }
  inline void Swap(PK_LOG_INFO_REQ* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PK_LOG_INFO_REQ* New() const final {
    return CreateMaybeMessage<PK_LOG_INFO_REQ>(nullptr);
  }

  PK_LOG_INFO_REQ* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PK_LOG_INFO_REQ>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PK_LOG_INFO_REQ& from);
  void MergeFrom(const PK_LOG_INFO_REQ& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PK_LOG_INFO_REQ* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pbapi.PK_LOG_INFO_REQ";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2eproto);
    return ::descriptor_table_api_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef PK_LOG_INFO_REQ_CMD_LOG_INFO_REQ CMD_LOG_INFO_REQ;
  static constexpr CMD_LOG_INFO_REQ UNKNOWN =
    PK_LOG_INFO_REQ_CMD_LOG_INFO_REQ_UNKNOWN;
  static constexpr CMD_LOG_INFO_REQ CMD =
    PK_LOG_INFO_REQ_CMD_LOG_INFO_REQ_CMD;
  static inline bool CMD_LOG_INFO_REQ_IsValid(int value) {
    return PK_LOG_INFO_REQ_CMD_LOG_INFO_REQ_IsValid(value);
  }
  static constexpr CMD_LOG_INFO_REQ CMD_LOG_INFO_REQ_MIN =
    PK_LOG_INFO_REQ_CMD_LOG_INFO_REQ_CMD_LOG_INFO_REQ_MIN;
  static constexpr CMD_LOG_INFO_REQ CMD_LOG_INFO_REQ_MAX =
    PK_LOG_INFO_REQ_CMD_LOG_INFO_REQ_CMD_LOG_INFO_REQ_MAX;
  static constexpr int CMD_LOG_INFO_REQ_ARRAYSIZE =
    PK_LOG_INFO_REQ_CMD_LOG_INFO_REQ_CMD_LOG_INFO_REQ_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  CMD_LOG_INFO_REQ_descriptor() {
    return PK_LOG_INFO_REQ_CMD_LOG_INFO_REQ_descriptor();
  }
  template<typename T>
  static inline const std::string& CMD_LOG_INFO_REQ_Name(T enum_t_value) {
    static_assert(::std::is_same<T, CMD_LOG_INFO_REQ>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function CMD_LOG_INFO_REQ_Name.");
    return PK_LOG_INFO_REQ_CMD_LOG_INFO_REQ_Name(enum_t_value);
  }
  static inline bool CMD_LOG_INFO_REQ_Parse(const std::string& name,
      CMD_LOG_INFO_REQ* value) {
    return PK_LOG_INFO_REQ_CMD_LOG_INFO_REQ_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kPwdFieldNumber = 2,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string pwd = 2;
  void clear_pwd();
  const std::string& pwd() const;
  void set_pwd(const std::string& value);
  void set_pwd(std::string&& value);
  void set_pwd(const char* value);
  void set_pwd(const char* value, size_t size);
  std::string* mutable_pwd();
  std::string* release_pwd();
  void set_allocated_pwd(std::string* pwd);
  private:
  const std::string& _internal_pwd() const;
  void _internal_set_pwd(const std::string& value);
  std::string* _internal_mutable_pwd();
  public:

  // @@protoc_insertion_point(class_scope:pbapi.PK_LOG_INFO_REQ)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pwd_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2eproto;
};
// -------------------------------------------------------------------

class PK_LOG_INFO_RSP :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pbapi.PK_LOG_INFO_RSP) */ {
 public:
  PK_LOG_INFO_RSP();
  virtual ~PK_LOG_INFO_RSP();

  PK_LOG_INFO_RSP(const PK_LOG_INFO_RSP& from);
  PK_LOG_INFO_RSP(PK_LOG_INFO_RSP&& from) noexcept
    : PK_LOG_INFO_RSP() {
    *this = ::std::move(from);
  }

  inline PK_LOG_INFO_RSP& operator=(const PK_LOG_INFO_RSP& from) {
    CopyFrom(from);
    return *this;
  }
  inline PK_LOG_INFO_RSP& operator=(PK_LOG_INFO_RSP&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PK_LOG_INFO_RSP& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PK_LOG_INFO_RSP* internal_default_instance() {
    return reinterpret_cast<const PK_LOG_INFO_RSP*>(
               &_PK_LOG_INFO_RSP_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(PK_LOG_INFO_RSP& a, PK_LOG_INFO_RSP& b) {
    a.Swap(&b);
  }
  inline void Swap(PK_LOG_INFO_RSP* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PK_LOG_INFO_RSP* New() const final {
    return CreateMaybeMessage<PK_LOG_INFO_RSP>(nullptr);
  }

  PK_LOG_INFO_RSP* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PK_LOG_INFO_RSP>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PK_LOG_INFO_RSP& from);
  void MergeFrom(const PK_LOG_INFO_RSP& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PK_LOG_INFO_RSP* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pbapi.PK_LOG_INFO_RSP";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2eproto);
    return ::descriptor_table_api_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef PK_LOG_INFO_RSP_CMD_LOG_INFO_RSP CMD_LOG_INFO_RSP;
  static constexpr CMD_LOG_INFO_RSP UNKNOWN =
    PK_LOG_INFO_RSP_CMD_LOG_INFO_RSP_UNKNOWN;
  static constexpr CMD_LOG_INFO_RSP CMD =
    PK_LOG_INFO_RSP_CMD_LOG_INFO_RSP_CMD;
  static inline bool CMD_LOG_INFO_RSP_IsValid(int value) {
    return PK_LOG_INFO_RSP_CMD_LOG_INFO_RSP_IsValid(value);
  }
  static constexpr CMD_LOG_INFO_RSP CMD_LOG_INFO_RSP_MIN =
    PK_LOG_INFO_RSP_CMD_LOG_INFO_RSP_CMD_LOG_INFO_RSP_MIN;
  static constexpr CMD_LOG_INFO_RSP CMD_LOG_INFO_RSP_MAX =
    PK_LOG_INFO_RSP_CMD_LOG_INFO_RSP_CMD_LOG_INFO_RSP_MAX;
  static constexpr int CMD_LOG_INFO_RSP_ARRAYSIZE =
    PK_LOG_INFO_RSP_CMD_LOG_INFO_RSP_CMD_LOG_INFO_RSP_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  CMD_LOG_INFO_RSP_descriptor() {
    return PK_LOG_INFO_RSP_CMD_LOG_INFO_RSP_descriptor();
  }
  template<typename T>
  static inline const std::string& CMD_LOG_INFO_RSP_Name(T enum_t_value) {
    static_assert(::std::is_same<T, CMD_LOG_INFO_RSP>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function CMD_LOG_INFO_RSP_Name.");
    return PK_LOG_INFO_RSP_CMD_LOG_INFO_RSP_Name(enum_t_value);
  }
  static inline bool CMD_LOG_INFO_RSP_Parse(const std::string& name,
      CMD_LOG_INFO_RSP* value) {
    return PK_LOG_INFO_RSP_CMD_LOG_INFO_RSP_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kErrmsgFieldNumber = 1,
    kFacilityFieldNumber = 2,
  };
  // string errmsg = 1;
  void clear_errmsg();
  const std::string& errmsg() const;
  void set_errmsg(const std::string& value);
  void set_errmsg(std::string&& value);
  void set_errmsg(const char* value);
  void set_errmsg(const char* value, size_t size);
  std::string* mutable_errmsg();
  std::string* release_errmsg();
  void set_allocated_errmsg(std::string* errmsg);
  private:
  const std::string& _internal_errmsg() const;
  void _internal_set_errmsg(const std::string& value);
  std::string* _internal_mutable_errmsg();
  public:

  // string facility = 2;
  void clear_facility();
  const std::string& facility() const;
  void set_facility(const std::string& value);
  void set_facility(std::string&& value);
  void set_facility(const char* value);
  void set_facility(const char* value, size_t size);
  std::string* mutable_facility();
  std::string* release_facility();
  void set_allocated_facility(std::string* facility);
  private:
  const std::string& _internal_facility() const;
  void _internal_set_facility(const std::string& value);
  std::string* _internal_mutable_facility();
  public:

  // @@protoc_insertion_point(class_scope:pbapi.PK_LOG_INFO_RSP)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr errmsg_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr facility_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2eproto;
};
// -------------------------------------------------------------------

class PK_LOG_SUBSCRIBE_REQ :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pbapi.PK_LOG_SUBSCRIBE_REQ) */ {
 public:
  PK_LOG_SUBSCRIBE_REQ();
  virtual ~PK_LOG_SUBSCRIBE_REQ();

  PK_LOG_SUBSCRIBE_REQ(const PK_LOG_SUBSCRIBE_REQ& from);
  PK_LOG_SUBSCRIBE_REQ(PK_LOG_SUBSCRIBE_REQ&& from) noexcept
    : PK_LOG_SUBSCRIBE_REQ() {
    *this = ::std::move(from);
  }

  inline PK_LOG_SUBSCRIBE_REQ& operator=(const PK_LOG_SUBSCRIBE_REQ& from) {
    CopyFrom(from);
    return *this;
  }
  inline PK_LOG_SUBSCRIBE_REQ& operator=(PK_LOG_SUBSCRIBE_REQ&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PK_LOG_SUBSCRIBE_REQ& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PK_LOG_SUBSCRIBE_REQ* internal_default_instance() {
    return reinterpret_cast<const PK_LOG_SUBSCRIBE_REQ*>(
               &_PK_LOG_SUBSCRIBE_REQ_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(PK_LOG_SUBSCRIBE_REQ& a, PK_LOG_SUBSCRIBE_REQ& b) {
    a.Swap(&b);
  }
  inline void Swap(PK_LOG_SUBSCRIBE_REQ* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PK_LOG_SUBSCRIBE_REQ* New() const final {
    return CreateMaybeMessage<PK_LOG_SUBSCRIBE_REQ>(nullptr);
  }

  PK_LOG_SUBSCRIBE_REQ* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PK_LOG_SUBSCRIBE_REQ>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PK_LOG_SUBSCRIBE_REQ& from);
  void MergeFrom(const PK_LOG_SUBSCRIBE_REQ& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PK_LOG_SUBSCRIBE_REQ* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pbapi.PK_LOG_SUBSCRIBE_REQ";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2eproto);
    return ::descriptor_table_api_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef PK_LOG_SUBSCRIBE_REQ_CMD_LOG_SUBSCRIBE_REQ CMD_LOG_SUBSCRIBE_REQ;
  static constexpr CMD_LOG_SUBSCRIBE_REQ UNKNOWN =
    PK_LOG_SUBSCRIBE_REQ_CMD_LOG_SUBSCRIBE_REQ_UNKNOWN;
  static constexpr CMD_LOG_SUBSCRIBE_REQ CMD =
    PK_LOG_SUBSCRIBE_REQ_CMD_LOG_SUBSCRIBE_REQ_CMD;
  static inline bool CMD_LOG_SUBSCRIBE_REQ_IsValid(int value) {
    return PK_LOG_SUBSCRIBE_REQ_CMD_LOG_SUBSCRIBE_REQ_IsValid(value);
  }
  static constexpr CMD_LOG_SUBSCRIBE_REQ CMD_LOG_SUBSCRIBE_REQ_MIN =
    PK_LOG_SUBSCRIBE_REQ_CMD_LOG_SUBSCRIBE_REQ_CMD_LOG_SUBSCRIBE_REQ_MIN;
  static constexpr CMD_LOG_SUBSCRIBE_REQ CMD_LOG_SUBSCRIBE_REQ_MAX =
    PK_LOG_SUBSCRIBE_REQ_CMD_LOG_SUBSCRIBE_REQ_CMD_LOG_SUBSCRIBE_REQ_MAX;
  static constexpr int CMD_LOG_SUBSCRIBE_REQ_ARRAYSIZE =
    PK_LOG_SUBSCRIBE_REQ_CMD_LOG_SUBSCRIBE_REQ_CMD_LOG_SUBSCRIBE_REQ_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  CMD_LOG_SUBSCRIBE_REQ_descriptor() {
    return PK_LOG_SUBSCRIBE_REQ_CMD_LOG_SUBSCRIBE_REQ_descriptor();
  }
  template<typename T>
  static inline const std::string& CMD_LOG_SUBSCRIBE_REQ_Name(T enum_t_value) {
    static_assert(::std::is_same<T, CMD_LOG_SUBSCRIBE_REQ>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function CMD_LOG_SUBSCRIBE_REQ_Name.");
    return PK_LOG_SUBSCRIBE_REQ_CMD_LOG_SUBSCRIBE_REQ_Name(enum_t_value);
  }
  static inline bool CMD_LOG_SUBSCRIBE_REQ_Parse(const std::string& name,
      CMD_LOG_SUBSCRIBE_REQ* value) {
    return PK_LOG_SUBSCRIBE_REQ_CMD_LOG_SUBSCRIBE_REQ_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kPwdFieldNumber = 2,
    kFacilityFieldNumber = 3,
    kLogAddrFieldNumber = 4,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string pwd = 2;
  void clear_pwd();
  const std::string& pwd() const;
  void set_pwd(const std::string& value);
  void set_pwd(std::string&& value);
  void set_pwd(const char* value);
  void set_pwd(const char* value, size_t size);
  std::string* mutable_pwd();
  std::string* release_pwd();
  void set_allocated_pwd(std::string* pwd);
  private:
  const std::string& _internal_pwd() const;
  void _internal_set_pwd(const std::string& value);
  std::string* _internal_mutable_pwd();
  public:

  // string facility = 3;
  void clear_facility();
  const std::string& facility() const;
  void set_facility(const std::string& value);
  void set_facility(std::string&& value);
  void set_facility(const char* value);
  void set_facility(const char* value, size_t size);
  std::string* mutable_facility();
  std::string* release_facility();
  void set_allocated_facility(std::string* facility);
  private:
  const std::string& _internal_facility() const;
  void _internal_set_facility(const std::string& value);
  std::string* _internal_mutable_facility();
  public:

  // string logAddr = 4;
  void clear_logaddr();
  const std::string& logaddr() const;
  void set_logaddr(const std::string& value);
  void set_logaddr(std::string&& value);
  void set_logaddr(const char* value);
  void set_logaddr(const char* value, size_t size);
  std::string* mutable_logaddr();
  std::string* release_logaddr();
  void set_allocated_logaddr(std::string* logaddr);
  private:
  const std::string& _internal_logaddr() const;
  void _internal_set_logaddr(const std::string& value);
  std::string* _internal_mutable_logaddr();
  public:

  // @@protoc_insertion_point(class_scope:pbapi.PK_LOG_SUBSCRIBE_REQ)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pwd_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr facility_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr logaddr_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2eproto;
};
// -------------------------------------------------------------------

class PK_LOG_SUBSCRIBE_RSP :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pbapi.PK_LOG_SUBSCRIBE_RSP) */ {
 public:
  PK_LOG_SUBSCRIBE_RSP();
  virtual ~PK_LOG_SUBSCRIBE_RSP();

  PK_LOG_SUBSCRIBE_RSP(const PK_LOG_SUBSCRIBE_RSP& from);
  PK_LOG_SUBSCRIBE_RSP(PK_LOG_SUBSCRIBE_RSP&& from) noexcept
    : PK_LOG_SUBSCRIBE_RSP() {
    *this = ::std::move(from);
  }

  inline PK_LOG_SUBSCRIBE_RSP& operator=(const PK_LOG_SUBSCRIBE_RSP& from) {
    CopyFrom(from);
    return *this;
  }
  inline PK_LOG_SUBSCRIBE_RSP& operator=(PK_LOG_SUBSCRIBE_RSP&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PK_LOG_SUBSCRIBE_RSP& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PK_LOG_SUBSCRIBE_RSP* internal_default_instance() {
    return reinterpret_cast<const PK_LOG_SUBSCRIBE_RSP*>(
               &_PK_LOG_SUBSCRIBE_RSP_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(PK_LOG_SUBSCRIBE_RSP& a, PK_LOG_SUBSCRIBE_RSP& b) {
    a.Swap(&b);
  }
  inline void Swap(PK_LOG_SUBSCRIBE_RSP* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PK_LOG_SUBSCRIBE_RSP* New() const final {
    return CreateMaybeMessage<PK_LOG_SUBSCRIBE_RSP>(nullptr);
  }

  PK_LOG_SUBSCRIBE_RSP* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PK_LOG_SUBSCRIBE_RSP>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PK_LOG_SUBSCRIBE_RSP& from);
  void MergeFrom(const PK_LOG_SUBSCRIBE_RSP& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PK_LOG_SUBSCRIBE_RSP* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pbapi.PK_LOG_SUBSCRIBE_RSP";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2eproto);
    return ::descriptor_table_api_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef PK_LOG_SUBSCRIBE_RSP_CMD_LOG_SUBSCRIBE_RSP CMD_LOG_SUBSCRIBE_RSP;
  static constexpr CMD_LOG_SUBSCRIBE_RSP UNKNOWN =
    PK_LOG_SUBSCRIBE_RSP_CMD_LOG_SUBSCRIBE_RSP_UNKNOWN;
  static constexpr CMD_LOG_SUBSCRIBE_RSP CMD =
    PK_LOG_SUBSCRIBE_RSP_CMD_LOG_SUBSCRIBE_RSP_CMD;
  static inline bool CMD_LOG_SUBSCRIBE_RSP_IsValid(int value) {
    return PK_LOG_SUBSCRIBE_RSP_CMD_LOG_SUBSCRIBE_RSP_IsValid(value);
  }
  static constexpr CMD_LOG_SUBSCRIBE_RSP CMD_LOG_SUBSCRIBE_RSP_MIN =
    PK_LOG_SUBSCRIBE_RSP_CMD_LOG_SUBSCRIBE_RSP_CMD_LOG_SUBSCRIBE_RSP_MIN;
  static constexpr CMD_LOG_SUBSCRIBE_RSP CMD_LOG_SUBSCRIBE_RSP_MAX =
    PK_LOG_SUBSCRIBE_RSP_CMD_LOG_SUBSCRIBE_RSP_CMD_LOG_SUBSCRIBE_RSP_MAX;
  static constexpr int CMD_LOG_SUBSCRIBE_RSP_ARRAYSIZE =
    PK_LOG_SUBSCRIBE_RSP_CMD_LOG_SUBSCRIBE_RSP_CMD_LOG_SUBSCRIBE_RSP_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  CMD_LOG_SUBSCRIBE_RSP_descriptor() {
    return PK_LOG_SUBSCRIBE_RSP_CMD_LOG_SUBSCRIBE_RSP_descriptor();
  }
  template<typename T>
  static inline const std::string& CMD_LOG_SUBSCRIBE_RSP_Name(T enum_t_value) {
    static_assert(::std::is_same<T, CMD_LOG_SUBSCRIBE_RSP>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function CMD_LOG_SUBSCRIBE_RSP_Name.");
    return PK_LOG_SUBSCRIBE_RSP_CMD_LOG_SUBSCRIBE_RSP_Name(enum_t_value);
  }
  static inline bool CMD_LOG_SUBSCRIBE_RSP_Parse(const std::string& name,
      CMD_LOG_SUBSCRIBE_RSP* value) {
    return PK_LOG_SUBSCRIBE_RSP_CMD_LOG_SUBSCRIBE_RSP_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kErrmsgFieldNumber = 1,
  };
  // string errmsg = 1;
  void clear_errmsg();
  const std::string& errmsg() const;
  void set_errmsg(const std::string& value);
  void set_errmsg(std::string&& value);
  void set_errmsg(const char* value);
  void set_errmsg(const char* value, size_t size);
  std::string* mutable_errmsg();
  std::string* release_errmsg();
  void set_allocated_errmsg(std::string* errmsg);
  private:
  const std::string& _internal_errmsg() const;
  void _internal_set_errmsg(const std::string& value);
  std::string* _internal_mutable_errmsg();
  public:

  // @@protoc_insertion_point(class_scope:pbapi.PK_LOG_SUBSCRIBE_RSP)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr errmsg_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2eproto;
};
// -------------------------------------------------------------------

class PK_LOG_PUBLISH_NOTICE :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pbapi.PK_LOG_PUBLISH_NOTICE) */ {
 public:
  PK_LOG_PUBLISH_NOTICE();
  virtual ~PK_LOG_PUBLISH_NOTICE();

  PK_LOG_PUBLISH_NOTICE(const PK_LOG_PUBLISH_NOTICE& from);
  PK_LOG_PUBLISH_NOTICE(PK_LOG_PUBLISH_NOTICE&& from) noexcept
    : PK_LOG_PUBLISH_NOTICE() {
    *this = ::std::move(from);
  }

  inline PK_LOG_PUBLISH_NOTICE& operator=(const PK_LOG_PUBLISH_NOTICE& from) {
    CopyFrom(from);
    return *this;
  }
  inline PK_LOG_PUBLISH_NOTICE& operator=(PK_LOG_PUBLISH_NOTICE&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PK_LOG_PUBLISH_NOTICE& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PK_LOG_PUBLISH_NOTICE* internal_default_instance() {
    return reinterpret_cast<const PK_LOG_PUBLISH_NOTICE*>(
               &_PK_LOG_PUBLISH_NOTICE_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(PK_LOG_PUBLISH_NOTICE& a, PK_LOG_PUBLISH_NOTICE& b) {
    a.Swap(&b);
  }
  inline void Swap(PK_LOG_PUBLISH_NOTICE* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PK_LOG_PUBLISH_NOTICE* New() const final {
    return CreateMaybeMessage<PK_LOG_PUBLISH_NOTICE>(nullptr);
  }

  PK_LOG_PUBLISH_NOTICE* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PK_LOG_PUBLISH_NOTICE>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PK_LOG_PUBLISH_NOTICE& from);
  void MergeFrom(const PK_LOG_PUBLISH_NOTICE& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PK_LOG_PUBLISH_NOTICE* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pbapi.PK_LOG_PUBLISH_NOTICE";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2eproto);
    return ::descriptor_table_api_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef PK_LOG_PUBLISH_NOTICE_CMD_LOG_PUBLISH_NOTICE CMD_LOG_PUBLISH_NOTICE;
  static constexpr CMD_LOG_PUBLISH_NOTICE UNKNOWN =
    PK_LOG_PUBLISH_NOTICE_CMD_LOG_PUBLISH_NOTICE_UNKNOWN;
  static constexpr CMD_LOG_PUBLISH_NOTICE CMD =
    PK_LOG_PUBLISH_NOTICE_CMD_LOG_PUBLISH_NOTICE_CMD;
  static inline bool CMD_LOG_PUBLISH_NOTICE_IsValid(int value) {
    return PK_LOG_PUBLISH_NOTICE_CMD_LOG_PUBLISH_NOTICE_IsValid(value);
  }
  static constexpr CMD_LOG_PUBLISH_NOTICE CMD_LOG_PUBLISH_NOTICE_MIN =
    PK_LOG_PUBLISH_NOTICE_CMD_LOG_PUBLISH_NOTICE_CMD_LOG_PUBLISH_NOTICE_MIN;
  static constexpr CMD_LOG_PUBLISH_NOTICE CMD_LOG_PUBLISH_NOTICE_MAX =
    PK_LOG_PUBLISH_NOTICE_CMD_LOG_PUBLISH_NOTICE_CMD_LOG_PUBLISH_NOTICE_MAX;
  static constexpr int CMD_LOG_PUBLISH_NOTICE_ARRAYSIZE =
    PK_LOG_PUBLISH_NOTICE_CMD_LOG_PUBLISH_NOTICE_CMD_LOG_PUBLISH_NOTICE_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  CMD_LOG_PUBLISH_NOTICE_descriptor() {
    return PK_LOG_PUBLISH_NOTICE_CMD_LOG_PUBLISH_NOTICE_descriptor();
  }
  template<typename T>
  static inline const std::string& CMD_LOG_PUBLISH_NOTICE_Name(T enum_t_value) {
    static_assert(::std::is_same<T, CMD_LOG_PUBLISH_NOTICE>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function CMD_LOG_PUBLISH_NOTICE_Name.");
    return PK_LOG_PUBLISH_NOTICE_CMD_LOG_PUBLISH_NOTICE_Name(enum_t_value);
  }
  static inline bool CMD_LOG_PUBLISH_NOTICE_Parse(const std::string& name,
      CMD_LOG_PUBLISH_NOTICE* value) {
    return PK_LOG_PUBLISH_NOTICE_CMD_LOG_PUBLISH_NOTICE_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kHostFieldNumber = 1,
    kMsgFieldNumber = 2,
    kTimestampFieldNumber = 3,
    kFileFieldNumber = 6,
    kFuncnameFieldNumber = 7,
    kFacilityFieldNumber = 9,
    kLevelFieldNumber = 4,
    kPidFieldNumber = 5,
    kLineFieldNumber = 8,
  };
  // string host = 1;
  void clear_host();
  const std::string& host() const;
  void set_host(const std::string& value);
  void set_host(std::string&& value);
  void set_host(const char* value);
  void set_host(const char* value, size_t size);
  std::string* mutable_host();
  std::string* release_host();
  void set_allocated_host(std::string* host);
  private:
  const std::string& _internal_host() const;
  void _internal_set_host(const std::string& value);
  std::string* _internal_mutable_host();
  public:

  // string msg = 2;
  void clear_msg();
  const std::string& msg() const;
  void set_msg(const std::string& value);
  void set_msg(std::string&& value);
  void set_msg(const char* value);
  void set_msg(const char* value, size_t size);
  std::string* mutable_msg();
  std::string* release_msg();
  void set_allocated_msg(std::string* msg);
  private:
  const std::string& _internal_msg() const;
  void _internal_set_msg(const std::string& value);
  std::string* _internal_mutable_msg();
  public:

  // string timestamp = 3;
  void clear_timestamp();
  const std::string& timestamp() const;
  void set_timestamp(const std::string& value);
  void set_timestamp(std::string&& value);
  void set_timestamp(const char* value);
  void set_timestamp(const char* value, size_t size);
  std::string* mutable_timestamp();
  std::string* release_timestamp();
  void set_allocated_timestamp(std::string* timestamp);
  private:
  const std::string& _internal_timestamp() const;
  void _internal_set_timestamp(const std::string& value);
  std::string* _internal_mutable_timestamp();
  public:

  // string file = 6;
  void clear_file();
  const std::string& file() const;
  void set_file(const std::string& value);
  void set_file(std::string&& value);
  void set_file(const char* value);
  void set_file(const char* value, size_t size);
  std::string* mutable_file();
  std::string* release_file();
  void set_allocated_file(std::string* file);
  private:
  const std::string& _internal_file() const;
  void _internal_set_file(const std::string& value);
  std::string* _internal_mutable_file();
  public:

  // string funcname = 7;
  void clear_funcname();
  const std::string& funcname() const;
  void set_funcname(const std::string& value);
  void set_funcname(std::string&& value);
  void set_funcname(const char* value);
  void set_funcname(const char* value, size_t size);
  std::string* mutable_funcname();
  std::string* release_funcname();
  void set_allocated_funcname(std::string* funcname);
  private:
  const std::string& _internal_funcname() const;
  void _internal_set_funcname(const std::string& value);
  std::string* _internal_mutable_funcname();
  public:

  // string facility = 9;
  void clear_facility();
  const std::string& facility() const;
  void set_facility(const std::string& value);
  void set_facility(std::string&& value);
  void set_facility(const char* value);
  void set_facility(const char* value, size_t size);
  std::string* mutable_facility();
  std::string* release_facility();
  void set_allocated_facility(std::string* facility);
  private:
  const std::string& _internal_facility() const;
  void _internal_set_facility(const std::string& value);
  std::string* _internal_mutable_facility();
  public:

  // int32 level = 4;
  void clear_level();
  ::PROTOBUF_NAMESPACE_ID::int32 level() const;
  void set_level(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_level() const;
  void _internal_set_level(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 pid = 5;
  void clear_pid();
  ::PROTOBUF_NAMESPACE_ID::int32 pid() const;
  void set_pid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_pid() const;
  void _internal_set_pid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 line = 8;
  void clear_line();
  ::PROTOBUF_NAMESPACE_ID::int32 line() const;
  void set_line(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_line() const;
  void _internal_set_line(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:pbapi.PK_LOG_PUBLISH_NOTICE)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr host_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr timestamp_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr file_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr funcname_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr facility_;
  ::PROTOBUF_NAMESPACE_ID::int32 level_;
  ::PROTOBUF_NAMESPACE_ID::int32 pid_;
  ::PROTOBUF_NAMESPACE_ID::int32 line_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// PK_LOG_HEARTBEAT

// string name = 1;
inline void PK_LOG_HEARTBEAT::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& PK_LOG_HEARTBEAT::name() const {
  // @@protoc_insertion_point(field_get:pbapi.PK_LOG_HEARTBEAT.name)
  return _internal_name();
}
inline void PK_LOG_HEARTBEAT::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:pbapi.PK_LOG_HEARTBEAT.name)
}
inline std::string* PK_LOG_HEARTBEAT::mutable_name() {
  // @@protoc_insertion_point(field_mutable:pbapi.PK_LOG_HEARTBEAT.name)
  return _internal_mutable_name();
}
inline const std::string& PK_LOG_HEARTBEAT::_internal_name() const {
  return name_.GetNoArena();
}
inline void PK_LOG_HEARTBEAT::_internal_set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void PK_LOG_HEARTBEAT::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pbapi.PK_LOG_HEARTBEAT.name)
}
inline void PK_LOG_HEARTBEAT::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbapi.PK_LOG_HEARTBEAT.name)
}
inline void PK_LOG_HEARTBEAT::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbapi.PK_LOG_HEARTBEAT.name)
}
inline std::string* PK_LOG_HEARTBEAT::_internal_mutable_name() {
  
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PK_LOG_HEARTBEAT::release_name() {
  // @@protoc_insertion_point(field_release:pbapi.PK_LOG_HEARTBEAT.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PK_LOG_HEARTBEAT::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:pbapi.PK_LOG_HEARTBEAT.name)
}

// string pwd = 2;
inline void PK_LOG_HEARTBEAT::clear_pwd() {
  pwd_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& PK_LOG_HEARTBEAT::pwd() const {
  // @@protoc_insertion_point(field_get:pbapi.PK_LOG_HEARTBEAT.pwd)
  return _internal_pwd();
}
inline void PK_LOG_HEARTBEAT::set_pwd(const std::string& value) {
  _internal_set_pwd(value);
  // @@protoc_insertion_point(field_set:pbapi.PK_LOG_HEARTBEAT.pwd)
}
inline std::string* PK_LOG_HEARTBEAT::mutable_pwd() {
  // @@protoc_insertion_point(field_mutable:pbapi.PK_LOG_HEARTBEAT.pwd)
  return _internal_mutable_pwd();
}
inline const std::string& PK_LOG_HEARTBEAT::_internal_pwd() const {
  return pwd_.GetNoArena();
}
inline void PK_LOG_HEARTBEAT::_internal_set_pwd(const std::string& value) {
  
  pwd_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void PK_LOG_HEARTBEAT::set_pwd(std::string&& value) {
  
  pwd_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pbapi.PK_LOG_HEARTBEAT.pwd)
}
inline void PK_LOG_HEARTBEAT::set_pwd(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  pwd_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbapi.PK_LOG_HEARTBEAT.pwd)
}
inline void PK_LOG_HEARTBEAT::set_pwd(const char* value, size_t size) {
  
  pwd_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbapi.PK_LOG_HEARTBEAT.pwd)
}
inline std::string* PK_LOG_HEARTBEAT::_internal_mutable_pwd() {
  
  return pwd_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PK_LOG_HEARTBEAT::release_pwd() {
  // @@protoc_insertion_point(field_release:pbapi.PK_LOG_HEARTBEAT.pwd)
  
  return pwd_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PK_LOG_HEARTBEAT::set_allocated_pwd(std::string* pwd) {
  if (pwd != nullptr) {
    
  } else {
    
  }
  pwd_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), pwd);
  // @@protoc_insertion_point(field_set_allocated:pbapi.PK_LOG_HEARTBEAT.pwd)
}

// -------------------------------------------------------------------

// PK_LOG_INFO_REQ

// string name = 1;
inline void PK_LOG_INFO_REQ::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& PK_LOG_INFO_REQ::name() const {
  // @@protoc_insertion_point(field_get:pbapi.PK_LOG_INFO_REQ.name)
  return _internal_name();
}
inline void PK_LOG_INFO_REQ::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:pbapi.PK_LOG_INFO_REQ.name)
}
inline std::string* PK_LOG_INFO_REQ::mutable_name() {
  // @@protoc_insertion_point(field_mutable:pbapi.PK_LOG_INFO_REQ.name)
  return _internal_mutable_name();
}
inline const std::string& PK_LOG_INFO_REQ::_internal_name() const {
  return name_.GetNoArena();
}
inline void PK_LOG_INFO_REQ::_internal_set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void PK_LOG_INFO_REQ::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pbapi.PK_LOG_INFO_REQ.name)
}
inline void PK_LOG_INFO_REQ::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbapi.PK_LOG_INFO_REQ.name)
}
inline void PK_LOG_INFO_REQ::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbapi.PK_LOG_INFO_REQ.name)
}
inline std::string* PK_LOG_INFO_REQ::_internal_mutable_name() {
  
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PK_LOG_INFO_REQ::release_name() {
  // @@protoc_insertion_point(field_release:pbapi.PK_LOG_INFO_REQ.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PK_LOG_INFO_REQ::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:pbapi.PK_LOG_INFO_REQ.name)
}

// string pwd = 2;
inline void PK_LOG_INFO_REQ::clear_pwd() {
  pwd_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& PK_LOG_INFO_REQ::pwd() const {
  // @@protoc_insertion_point(field_get:pbapi.PK_LOG_INFO_REQ.pwd)
  return _internal_pwd();
}
inline void PK_LOG_INFO_REQ::set_pwd(const std::string& value) {
  _internal_set_pwd(value);
  // @@protoc_insertion_point(field_set:pbapi.PK_LOG_INFO_REQ.pwd)
}
inline std::string* PK_LOG_INFO_REQ::mutable_pwd() {
  // @@protoc_insertion_point(field_mutable:pbapi.PK_LOG_INFO_REQ.pwd)
  return _internal_mutable_pwd();
}
inline const std::string& PK_LOG_INFO_REQ::_internal_pwd() const {
  return pwd_.GetNoArena();
}
inline void PK_LOG_INFO_REQ::_internal_set_pwd(const std::string& value) {
  
  pwd_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void PK_LOG_INFO_REQ::set_pwd(std::string&& value) {
  
  pwd_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pbapi.PK_LOG_INFO_REQ.pwd)
}
inline void PK_LOG_INFO_REQ::set_pwd(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  pwd_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbapi.PK_LOG_INFO_REQ.pwd)
}
inline void PK_LOG_INFO_REQ::set_pwd(const char* value, size_t size) {
  
  pwd_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbapi.PK_LOG_INFO_REQ.pwd)
}
inline std::string* PK_LOG_INFO_REQ::_internal_mutable_pwd() {
  
  return pwd_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PK_LOG_INFO_REQ::release_pwd() {
  // @@protoc_insertion_point(field_release:pbapi.PK_LOG_INFO_REQ.pwd)
  
  return pwd_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PK_LOG_INFO_REQ::set_allocated_pwd(std::string* pwd) {
  if (pwd != nullptr) {
    
  } else {
    
  }
  pwd_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), pwd);
  // @@protoc_insertion_point(field_set_allocated:pbapi.PK_LOG_INFO_REQ.pwd)
}

// -------------------------------------------------------------------

// PK_LOG_INFO_RSP

// string errmsg = 1;
inline void PK_LOG_INFO_RSP::clear_errmsg() {
  errmsg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& PK_LOG_INFO_RSP::errmsg() const {
  // @@protoc_insertion_point(field_get:pbapi.PK_LOG_INFO_RSP.errmsg)
  return _internal_errmsg();
}
inline void PK_LOG_INFO_RSP::set_errmsg(const std::string& value) {
  _internal_set_errmsg(value);
  // @@protoc_insertion_point(field_set:pbapi.PK_LOG_INFO_RSP.errmsg)
}
inline std::string* PK_LOG_INFO_RSP::mutable_errmsg() {
  // @@protoc_insertion_point(field_mutable:pbapi.PK_LOG_INFO_RSP.errmsg)
  return _internal_mutable_errmsg();
}
inline const std::string& PK_LOG_INFO_RSP::_internal_errmsg() const {
  return errmsg_.GetNoArena();
}
inline void PK_LOG_INFO_RSP::_internal_set_errmsg(const std::string& value) {
  
  errmsg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void PK_LOG_INFO_RSP::set_errmsg(std::string&& value) {
  
  errmsg_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pbapi.PK_LOG_INFO_RSP.errmsg)
}
inline void PK_LOG_INFO_RSP::set_errmsg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  errmsg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbapi.PK_LOG_INFO_RSP.errmsg)
}
inline void PK_LOG_INFO_RSP::set_errmsg(const char* value, size_t size) {
  
  errmsg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbapi.PK_LOG_INFO_RSP.errmsg)
}
inline std::string* PK_LOG_INFO_RSP::_internal_mutable_errmsg() {
  
  return errmsg_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PK_LOG_INFO_RSP::release_errmsg() {
  // @@protoc_insertion_point(field_release:pbapi.PK_LOG_INFO_RSP.errmsg)
  
  return errmsg_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PK_LOG_INFO_RSP::set_allocated_errmsg(std::string* errmsg) {
  if (errmsg != nullptr) {
    
  } else {
    
  }
  errmsg_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), errmsg);
  // @@protoc_insertion_point(field_set_allocated:pbapi.PK_LOG_INFO_RSP.errmsg)
}

// string facility = 2;
inline void PK_LOG_INFO_RSP::clear_facility() {
  facility_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& PK_LOG_INFO_RSP::facility() const {
  // @@protoc_insertion_point(field_get:pbapi.PK_LOG_INFO_RSP.facility)
  return _internal_facility();
}
inline void PK_LOG_INFO_RSP::set_facility(const std::string& value) {
  _internal_set_facility(value);
  // @@protoc_insertion_point(field_set:pbapi.PK_LOG_INFO_RSP.facility)
}
inline std::string* PK_LOG_INFO_RSP::mutable_facility() {
  // @@protoc_insertion_point(field_mutable:pbapi.PK_LOG_INFO_RSP.facility)
  return _internal_mutable_facility();
}
inline const std::string& PK_LOG_INFO_RSP::_internal_facility() const {
  return facility_.GetNoArena();
}
inline void PK_LOG_INFO_RSP::_internal_set_facility(const std::string& value) {
  
  facility_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void PK_LOG_INFO_RSP::set_facility(std::string&& value) {
  
  facility_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pbapi.PK_LOG_INFO_RSP.facility)
}
inline void PK_LOG_INFO_RSP::set_facility(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  facility_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbapi.PK_LOG_INFO_RSP.facility)
}
inline void PK_LOG_INFO_RSP::set_facility(const char* value, size_t size) {
  
  facility_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbapi.PK_LOG_INFO_RSP.facility)
}
inline std::string* PK_LOG_INFO_RSP::_internal_mutable_facility() {
  
  return facility_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PK_LOG_INFO_RSP::release_facility() {
  // @@protoc_insertion_point(field_release:pbapi.PK_LOG_INFO_RSP.facility)
  
  return facility_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PK_LOG_INFO_RSP::set_allocated_facility(std::string* facility) {
  if (facility != nullptr) {
    
  } else {
    
  }
  facility_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), facility);
  // @@protoc_insertion_point(field_set_allocated:pbapi.PK_LOG_INFO_RSP.facility)
}

// -------------------------------------------------------------------

// PK_LOG_SUBSCRIBE_REQ

// string name = 1;
inline void PK_LOG_SUBSCRIBE_REQ::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& PK_LOG_SUBSCRIBE_REQ::name() const {
  // @@protoc_insertion_point(field_get:pbapi.PK_LOG_SUBSCRIBE_REQ.name)
  return _internal_name();
}
inline void PK_LOG_SUBSCRIBE_REQ::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:pbapi.PK_LOG_SUBSCRIBE_REQ.name)
}
inline std::string* PK_LOG_SUBSCRIBE_REQ::mutable_name() {
  // @@protoc_insertion_point(field_mutable:pbapi.PK_LOG_SUBSCRIBE_REQ.name)
  return _internal_mutable_name();
}
inline const std::string& PK_LOG_SUBSCRIBE_REQ::_internal_name() const {
  return name_.GetNoArena();
}
inline void PK_LOG_SUBSCRIBE_REQ::_internal_set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void PK_LOG_SUBSCRIBE_REQ::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pbapi.PK_LOG_SUBSCRIBE_REQ.name)
}
inline void PK_LOG_SUBSCRIBE_REQ::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbapi.PK_LOG_SUBSCRIBE_REQ.name)
}
inline void PK_LOG_SUBSCRIBE_REQ::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbapi.PK_LOG_SUBSCRIBE_REQ.name)
}
inline std::string* PK_LOG_SUBSCRIBE_REQ::_internal_mutable_name() {
  
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PK_LOG_SUBSCRIBE_REQ::release_name() {
  // @@protoc_insertion_point(field_release:pbapi.PK_LOG_SUBSCRIBE_REQ.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PK_LOG_SUBSCRIBE_REQ::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:pbapi.PK_LOG_SUBSCRIBE_REQ.name)
}

// string pwd = 2;
inline void PK_LOG_SUBSCRIBE_REQ::clear_pwd() {
  pwd_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& PK_LOG_SUBSCRIBE_REQ::pwd() const {
  // @@protoc_insertion_point(field_get:pbapi.PK_LOG_SUBSCRIBE_REQ.pwd)
  return _internal_pwd();
}
inline void PK_LOG_SUBSCRIBE_REQ::set_pwd(const std::string& value) {
  _internal_set_pwd(value);
  // @@protoc_insertion_point(field_set:pbapi.PK_LOG_SUBSCRIBE_REQ.pwd)
}
inline std::string* PK_LOG_SUBSCRIBE_REQ::mutable_pwd() {
  // @@protoc_insertion_point(field_mutable:pbapi.PK_LOG_SUBSCRIBE_REQ.pwd)
  return _internal_mutable_pwd();
}
inline const std::string& PK_LOG_SUBSCRIBE_REQ::_internal_pwd() const {
  return pwd_.GetNoArena();
}
inline void PK_LOG_SUBSCRIBE_REQ::_internal_set_pwd(const std::string& value) {
  
  pwd_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void PK_LOG_SUBSCRIBE_REQ::set_pwd(std::string&& value) {
  
  pwd_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pbapi.PK_LOG_SUBSCRIBE_REQ.pwd)
}
inline void PK_LOG_SUBSCRIBE_REQ::set_pwd(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  pwd_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbapi.PK_LOG_SUBSCRIBE_REQ.pwd)
}
inline void PK_LOG_SUBSCRIBE_REQ::set_pwd(const char* value, size_t size) {
  
  pwd_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbapi.PK_LOG_SUBSCRIBE_REQ.pwd)
}
inline std::string* PK_LOG_SUBSCRIBE_REQ::_internal_mutable_pwd() {
  
  return pwd_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PK_LOG_SUBSCRIBE_REQ::release_pwd() {
  // @@protoc_insertion_point(field_release:pbapi.PK_LOG_SUBSCRIBE_REQ.pwd)
  
  return pwd_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PK_LOG_SUBSCRIBE_REQ::set_allocated_pwd(std::string* pwd) {
  if (pwd != nullptr) {
    
  } else {
    
  }
  pwd_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), pwd);
  // @@protoc_insertion_point(field_set_allocated:pbapi.PK_LOG_SUBSCRIBE_REQ.pwd)
}

// string facility = 3;
inline void PK_LOG_SUBSCRIBE_REQ::clear_facility() {
  facility_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& PK_LOG_SUBSCRIBE_REQ::facility() const {
  // @@protoc_insertion_point(field_get:pbapi.PK_LOG_SUBSCRIBE_REQ.facility)
  return _internal_facility();
}
inline void PK_LOG_SUBSCRIBE_REQ::set_facility(const std::string& value) {
  _internal_set_facility(value);
  // @@protoc_insertion_point(field_set:pbapi.PK_LOG_SUBSCRIBE_REQ.facility)
}
inline std::string* PK_LOG_SUBSCRIBE_REQ::mutable_facility() {
  // @@protoc_insertion_point(field_mutable:pbapi.PK_LOG_SUBSCRIBE_REQ.facility)
  return _internal_mutable_facility();
}
inline const std::string& PK_LOG_SUBSCRIBE_REQ::_internal_facility() const {
  return facility_.GetNoArena();
}
inline void PK_LOG_SUBSCRIBE_REQ::_internal_set_facility(const std::string& value) {
  
  facility_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void PK_LOG_SUBSCRIBE_REQ::set_facility(std::string&& value) {
  
  facility_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pbapi.PK_LOG_SUBSCRIBE_REQ.facility)
}
inline void PK_LOG_SUBSCRIBE_REQ::set_facility(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  facility_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbapi.PK_LOG_SUBSCRIBE_REQ.facility)
}
inline void PK_LOG_SUBSCRIBE_REQ::set_facility(const char* value, size_t size) {
  
  facility_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbapi.PK_LOG_SUBSCRIBE_REQ.facility)
}
inline std::string* PK_LOG_SUBSCRIBE_REQ::_internal_mutable_facility() {
  
  return facility_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PK_LOG_SUBSCRIBE_REQ::release_facility() {
  // @@protoc_insertion_point(field_release:pbapi.PK_LOG_SUBSCRIBE_REQ.facility)
  
  return facility_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PK_LOG_SUBSCRIBE_REQ::set_allocated_facility(std::string* facility) {
  if (facility != nullptr) {
    
  } else {
    
  }
  facility_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), facility);
  // @@protoc_insertion_point(field_set_allocated:pbapi.PK_LOG_SUBSCRIBE_REQ.facility)
}

// string logAddr = 4;
inline void PK_LOG_SUBSCRIBE_REQ::clear_logaddr() {
  logaddr_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& PK_LOG_SUBSCRIBE_REQ::logaddr() const {
  // @@protoc_insertion_point(field_get:pbapi.PK_LOG_SUBSCRIBE_REQ.logAddr)
  return _internal_logaddr();
}
inline void PK_LOG_SUBSCRIBE_REQ::set_logaddr(const std::string& value) {
  _internal_set_logaddr(value);
  // @@protoc_insertion_point(field_set:pbapi.PK_LOG_SUBSCRIBE_REQ.logAddr)
}
inline std::string* PK_LOG_SUBSCRIBE_REQ::mutable_logaddr() {
  // @@protoc_insertion_point(field_mutable:pbapi.PK_LOG_SUBSCRIBE_REQ.logAddr)
  return _internal_mutable_logaddr();
}
inline const std::string& PK_LOG_SUBSCRIBE_REQ::_internal_logaddr() const {
  return logaddr_.GetNoArena();
}
inline void PK_LOG_SUBSCRIBE_REQ::_internal_set_logaddr(const std::string& value) {
  
  logaddr_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void PK_LOG_SUBSCRIBE_REQ::set_logaddr(std::string&& value) {
  
  logaddr_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pbapi.PK_LOG_SUBSCRIBE_REQ.logAddr)
}
inline void PK_LOG_SUBSCRIBE_REQ::set_logaddr(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  logaddr_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbapi.PK_LOG_SUBSCRIBE_REQ.logAddr)
}
inline void PK_LOG_SUBSCRIBE_REQ::set_logaddr(const char* value, size_t size) {
  
  logaddr_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbapi.PK_LOG_SUBSCRIBE_REQ.logAddr)
}
inline std::string* PK_LOG_SUBSCRIBE_REQ::_internal_mutable_logaddr() {
  
  return logaddr_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PK_LOG_SUBSCRIBE_REQ::release_logaddr() {
  // @@protoc_insertion_point(field_release:pbapi.PK_LOG_SUBSCRIBE_REQ.logAddr)
  
  return logaddr_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PK_LOG_SUBSCRIBE_REQ::set_allocated_logaddr(std::string* logaddr) {
  if (logaddr != nullptr) {
    
  } else {
    
  }
  logaddr_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), logaddr);
  // @@protoc_insertion_point(field_set_allocated:pbapi.PK_LOG_SUBSCRIBE_REQ.logAddr)
}

// -------------------------------------------------------------------

// PK_LOG_SUBSCRIBE_RSP

// string errmsg = 1;
inline void PK_LOG_SUBSCRIBE_RSP::clear_errmsg() {
  errmsg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& PK_LOG_SUBSCRIBE_RSP::errmsg() const {
  // @@protoc_insertion_point(field_get:pbapi.PK_LOG_SUBSCRIBE_RSP.errmsg)
  return _internal_errmsg();
}
inline void PK_LOG_SUBSCRIBE_RSP::set_errmsg(const std::string& value) {
  _internal_set_errmsg(value);
  // @@protoc_insertion_point(field_set:pbapi.PK_LOG_SUBSCRIBE_RSP.errmsg)
}
inline std::string* PK_LOG_SUBSCRIBE_RSP::mutable_errmsg() {
  // @@protoc_insertion_point(field_mutable:pbapi.PK_LOG_SUBSCRIBE_RSP.errmsg)
  return _internal_mutable_errmsg();
}
inline const std::string& PK_LOG_SUBSCRIBE_RSP::_internal_errmsg() const {
  return errmsg_.GetNoArena();
}
inline void PK_LOG_SUBSCRIBE_RSP::_internal_set_errmsg(const std::string& value) {
  
  errmsg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void PK_LOG_SUBSCRIBE_RSP::set_errmsg(std::string&& value) {
  
  errmsg_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pbapi.PK_LOG_SUBSCRIBE_RSP.errmsg)
}
inline void PK_LOG_SUBSCRIBE_RSP::set_errmsg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  errmsg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbapi.PK_LOG_SUBSCRIBE_RSP.errmsg)
}
inline void PK_LOG_SUBSCRIBE_RSP::set_errmsg(const char* value, size_t size) {
  
  errmsg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbapi.PK_LOG_SUBSCRIBE_RSP.errmsg)
}
inline std::string* PK_LOG_SUBSCRIBE_RSP::_internal_mutable_errmsg() {
  
  return errmsg_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PK_LOG_SUBSCRIBE_RSP::release_errmsg() {
  // @@protoc_insertion_point(field_release:pbapi.PK_LOG_SUBSCRIBE_RSP.errmsg)
  
  return errmsg_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PK_LOG_SUBSCRIBE_RSP::set_allocated_errmsg(std::string* errmsg) {
  if (errmsg != nullptr) {
    
  } else {
    
  }
  errmsg_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), errmsg);
  // @@protoc_insertion_point(field_set_allocated:pbapi.PK_LOG_SUBSCRIBE_RSP.errmsg)
}

// -------------------------------------------------------------------

// PK_LOG_PUBLISH_NOTICE

// string host = 1;
inline void PK_LOG_PUBLISH_NOTICE::clear_host() {
  host_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& PK_LOG_PUBLISH_NOTICE::host() const {
  // @@protoc_insertion_point(field_get:pbapi.PK_LOG_PUBLISH_NOTICE.host)
  return _internal_host();
}
inline void PK_LOG_PUBLISH_NOTICE::set_host(const std::string& value) {
  _internal_set_host(value);
  // @@protoc_insertion_point(field_set:pbapi.PK_LOG_PUBLISH_NOTICE.host)
}
inline std::string* PK_LOG_PUBLISH_NOTICE::mutable_host() {
  // @@protoc_insertion_point(field_mutable:pbapi.PK_LOG_PUBLISH_NOTICE.host)
  return _internal_mutable_host();
}
inline const std::string& PK_LOG_PUBLISH_NOTICE::_internal_host() const {
  return host_.GetNoArena();
}
inline void PK_LOG_PUBLISH_NOTICE::_internal_set_host(const std::string& value) {
  
  host_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void PK_LOG_PUBLISH_NOTICE::set_host(std::string&& value) {
  
  host_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pbapi.PK_LOG_PUBLISH_NOTICE.host)
}
inline void PK_LOG_PUBLISH_NOTICE::set_host(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  host_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbapi.PK_LOG_PUBLISH_NOTICE.host)
}
inline void PK_LOG_PUBLISH_NOTICE::set_host(const char* value, size_t size) {
  
  host_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbapi.PK_LOG_PUBLISH_NOTICE.host)
}
inline std::string* PK_LOG_PUBLISH_NOTICE::_internal_mutable_host() {
  
  return host_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PK_LOG_PUBLISH_NOTICE::release_host() {
  // @@protoc_insertion_point(field_release:pbapi.PK_LOG_PUBLISH_NOTICE.host)
  
  return host_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PK_LOG_PUBLISH_NOTICE::set_allocated_host(std::string* host) {
  if (host != nullptr) {
    
  } else {
    
  }
  host_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), host);
  // @@protoc_insertion_point(field_set_allocated:pbapi.PK_LOG_PUBLISH_NOTICE.host)
}

// string msg = 2;
inline void PK_LOG_PUBLISH_NOTICE::clear_msg() {
  msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& PK_LOG_PUBLISH_NOTICE::msg() const {
  // @@protoc_insertion_point(field_get:pbapi.PK_LOG_PUBLISH_NOTICE.msg)
  return _internal_msg();
}
inline void PK_LOG_PUBLISH_NOTICE::set_msg(const std::string& value) {
  _internal_set_msg(value);
  // @@protoc_insertion_point(field_set:pbapi.PK_LOG_PUBLISH_NOTICE.msg)
}
inline std::string* PK_LOG_PUBLISH_NOTICE::mutable_msg() {
  // @@protoc_insertion_point(field_mutable:pbapi.PK_LOG_PUBLISH_NOTICE.msg)
  return _internal_mutable_msg();
}
inline const std::string& PK_LOG_PUBLISH_NOTICE::_internal_msg() const {
  return msg_.GetNoArena();
}
inline void PK_LOG_PUBLISH_NOTICE::_internal_set_msg(const std::string& value) {
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void PK_LOG_PUBLISH_NOTICE::set_msg(std::string&& value) {
  
  msg_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pbapi.PK_LOG_PUBLISH_NOTICE.msg)
}
inline void PK_LOG_PUBLISH_NOTICE::set_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbapi.PK_LOG_PUBLISH_NOTICE.msg)
}
inline void PK_LOG_PUBLISH_NOTICE::set_msg(const char* value, size_t size) {
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbapi.PK_LOG_PUBLISH_NOTICE.msg)
}
inline std::string* PK_LOG_PUBLISH_NOTICE::_internal_mutable_msg() {
  
  return msg_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PK_LOG_PUBLISH_NOTICE::release_msg() {
  // @@protoc_insertion_point(field_release:pbapi.PK_LOG_PUBLISH_NOTICE.msg)
  
  return msg_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PK_LOG_PUBLISH_NOTICE::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:pbapi.PK_LOG_PUBLISH_NOTICE.msg)
}

// string timestamp = 3;
inline void PK_LOG_PUBLISH_NOTICE::clear_timestamp() {
  timestamp_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& PK_LOG_PUBLISH_NOTICE::timestamp() const {
  // @@protoc_insertion_point(field_get:pbapi.PK_LOG_PUBLISH_NOTICE.timestamp)
  return _internal_timestamp();
}
inline void PK_LOG_PUBLISH_NOTICE::set_timestamp(const std::string& value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:pbapi.PK_LOG_PUBLISH_NOTICE.timestamp)
}
inline std::string* PK_LOG_PUBLISH_NOTICE::mutable_timestamp() {
  // @@protoc_insertion_point(field_mutable:pbapi.PK_LOG_PUBLISH_NOTICE.timestamp)
  return _internal_mutable_timestamp();
}
inline const std::string& PK_LOG_PUBLISH_NOTICE::_internal_timestamp() const {
  return timestamp_.GetNoArena();
}
inline void PK_LOG_PUBLISH_NOTICE::_internal_set_timestamp(const std::string& value) {
  
  timestamp_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void PK_LOG_PUBLISH_NOTICE::set_timestamp(std::string&& value) {
  
  timestamp_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pbapi.PK_LOG_PUBLISH_NOTICE.timestamp)
}
inline void PK_LOG_PUBLISH_NOTICE::set_timestamp(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  timestamp_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbapi.PK_LOG_PUBLISH_NOTICE.timestamp)
}
inline void PK_LOG_PUBLISH_NOTICE::set_timestamp(const char* value, size_t size) {
  
  timestamp_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbapi.PK_LOG_PUBLISH_NOTICE.timestamp)
}
inline std::string* PK_LOG_PUBLISH_NOTICE::_internal_mutable_timestamp() {
  
  return timestamp_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PK_LOG_PUBLISH_NOTICE::release_timestamp() {
  // @@protoc_insertion_point(field_release:pbapi.PK_LOG_PUBLISH_NOTICE.timestamp)
  
  return timestamp_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PK_LOG_PUBLISH_NOTICE::set_allocated_timestamp(std::string* timestamp) {
  if (timestamp != nullptr) {
    
  } else {
    
  }
  timestamp_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), timestamp);
  // @@protoc_insertion_point(field_set_allocated:pbapi.PK_LOG_PUBLISH_NOTICE.timestamp)
}

// int32 level = 4;
inline void PK_LOG_PUBLISH_NOTICE::clear_level() {
  level_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PK_LOG_PUBLISH_NOTICE::_internal_level() const {
  return level_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PK_LOG_PUBLISH_NOTICE::level() const {
  // @@protoc_insertion_point(field_get:pbapi.PK_LOG_PUBLISH_NOTICE.level)
  return _internal_level();
}
inline void PK_LOG_PUBLISH_NOTICE::_internal_set_level(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  level_ = value;
}
inline void PK_LOG_PUBLISH_NOTICE::set_level(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_level(value);
  // @@protoc_insertion_point(field_set:pbapi.PK_LOG_PUBLISH_NOTICE.level)
}

// int32 pid = 5;
inline void PK_LOG_PUBLISH_NOTICE::clear_pid() {
  pid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PK_LOG_PUBLISH_NOTICE::_internal_pid() const {
  return pid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PK_LOG_PUBLISH_NOTICE::pid() const {
  // @@protoc_insertion_point(field_get:pbapi.PK_LOG_PUBLISH_NOTICE.pid)
  return _internal_pid();
}
inline void PK_LOG_PUBLISH_NOTICE::_internal_set_pid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  pid_ = value;
}
inline void PK_LOG_PUBLISH_NOTICE::set_pid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_pid(value);
  // @@protoc_insertion_point(field_set:pbapi.PK_LOG_PUBLISH_NOTICE.pid)
}

// string file = 6;
inline void PK_LOG_PUBLISH_NOTICE::clear_file() {
  file_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& PK_LOG_PUBLISH_NOTICE::file() const {
  // @@protoc_insertion_point(field_get:pbapi.PK_LOG_PUBLISH_NOTICE.file)
  return _internal_file();
}
inline void PK_LOG_PUBLISH_NOTICE::set_file(const std::string& value) {
  _internal_set_file(value);
  // @@protoc_insertion_point(field_set:pbapi.PK_LOG_PUBLISH_NOTICE.file)
}
inline std::string* PK_LOG_PUBLISH_NOTICE::mutable_file() {
  // @@protoc_insertion_point(field_mutable:pbapi.PK_LOG_PUBLISH_NOTICE.file)
  return _internal_mutable_file();
}
inline const std::string& PK_LOG_PUBLISH_NOTICE::_internal_file() const {
  return file_.GetNoArena();
}
inline void PK_LOG_PUBLISH_NOTICE::_internal_set_file(const std::string& value) {
  
  file_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void PK_LOG_PUBLISH_NOTICE::set_file(std::string&& value) {
  
  file_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pbapi.PK_LOG_PUBLISH_NOTICE.file)
}
inline void PK_LOG_PUBLISH_NOTICE::set_file(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  file_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbapi.PK_LOG_PUBLISH_NOTICE.file)
}
inline void PK_LOG_PUBLISH_NOTICE::set_file(const char* value, size_t size) {
  
  file_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbapi.PK_LOG_PUBLISH_NOTICE.file)
}
inline std::string* PK_LOG_PUBLISH_NOTICE::_internal_mutable_file() {
  
  return file_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PK_LOG_PUBLISH_NOTICE::release_file() {
  // @@protoc_insertion_point(field_release:pbapi.PK_LOG_PUBLISH_NOTICE.file)
  
  return file_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PK_LOG_PUBLISH_NOTICE::set_allocated_file(std::string* file) {
  if (file != nullptr) {
    
  } else {
    
  }
  file_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), file);
  // @@protoc_insertion_point(field_set_allocated:pbapi.PK_LOG_PUBLISH_NOTICE.file)
}

// string funcname = 7;
inline void PK_LOG_PUBLISH_NOTICE::clear_funcname() {
  funcname_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& PK_LOG_PUBLISH_NOTICE::funcname() const {
  // @@protoc_insertion_point(field_get:pbapi.PK_LOG_PUBLISH_NOTICE.funcname)
  return _internal_funcname();
}
inline void PK_LOG_PUBLISH_NOTICE::set_funcname(const std::string& value) {
  _internal_set_funcname(value);
  // @@protoc_insertion_point(field_set:pbapi.PK_LOG_PUBLISH_NOTICE.funcname)
}
inline std::string* PK_LOG_PUBLISH_NOTICE::mutable_funcname() {
  // @@protoc_insertion_point(field_mutable:pbapi.PK_LOG_PUBLISH_NOTICE.funcname)
  return _internal_mutable_funcname();
}
inline const std::string& PK_LOG_PUBLISH_NOTICE::_internal_funcname() const {
  return funcname_.GetNoArena();
}
inline void PK_LOG_PUBLISH_NOTICE::_internal_set_funcname(const std::string& value) {
  
  funcname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void PK_LOG_PUBLISH_NOTICE::set_funcname(std::string&& value) {
  
  funcname_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pbapi.PK_LOG_PUBLISH_NOTICE.funcname)
}
inline void PK_LOG_PUBLISH_NOTICE::set_funcname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  funcname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbapi.PK_LOG_PUBLISH_NOTICE.funcname)
}
inline void PK_LOG_PUBLISH_NOTICE::set_funcname(const char* value, size_t size) {
  
  funcname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbapi.PK_LOG_PUBLISH_NOTICE.funcname)
}
inline std::string* PK_LOG_PUBLISH_NOTICE::_internal_mutable_funcname() {
  
  return funcname_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PK_LOG_PUBLISH_NOTICE::release_funcname() {
  // @@protoc_insertion_point(field_release:pbapi.PK_LOG_PUBLISH_NOTICE.funcname)
  
  return funcname_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PK_LOG_PUBLISH_NOTICE::set_allocated_funcname(std::string* funcname) {
  if (funcname != nullptr) {
    
  } else {
    
  }
  funcname_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), funcname);
  // @@protoc_insertion_point(field_set_allocated:pbapi.PK_LOG_PUBLISH_NOTICE.funcname)
}

// int32 line = 8;
inline void PK_LOG_PUBLISH_NOTICE::clear_line() {
  line_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PK_LOG_PUBLISH_NOTICE::_internal_line() const {
  return line_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PK_LOG_PUBLISH_NOTICE::line() const {
  // @@protoc_insertion_point(field_get:pbapi.PK_LOG_PUBLISH_NOTICE.line)
  return _internal_line();
}
inline void PK_LOG_PUBLISH_NOTICE::_internal_set_line(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  line_ = value;
}
inline void PK_LOG_PUBLISH_NOTICE::set_line(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_line(value);
  // @@protoc_insertion_point(field_set:pbapi.PK_LOG_PUBLISH_NOTICE.line)
}

// string facility = 9;
inline void PK_LOG_PUBLISH_NOTICE::clear_facility() {
  facility_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& PK_LOG_PUBLISH_NOTICE::facility() const {
  // @@protoc_insertion_point(field_get:pbapi.PK_LOG_PUBLISH_NOTICE.facility)
  return _internal_facility();
}
inline void PK_LOG_PUBLISH_NOTICE::set_facility(const std::string& value) {
  _internal_set_facility(value);
  // @@protoc_insertion_point(field_set:pbapi.PK_LOG_PUBLISH_NOTICE.facility)
}
inline std::string* PK_LOG_PUBLISH_NOTICE::mutable_facility() {
  // @@protoc_insertion_point(field_mutable:pbapi.PK_LOG_PUBLISH_NOTICE.facility)
  return _internal_mutable_facility();
}
inline const std::string& PK_LOG_PUBLISH_NOTICE::_internal_facility() const {
  return facility_.GetNoArena();
}
inline void PK_LOG_PUBLISH_NOTICE::_internal_set_facility(const std::string& value) {
  
  facility_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void PK_LOG_PUBLISH_NOTICE::set_facility(std::string&& value) {
  
  facility_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pbapi.PK_LOG_PUBLISH_NOTICE.facility)
}
inline void PK_LOG_PUBLISH_NOTICE::set_facility(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  facility_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbapi.PK_LOG_PUBLISH_NOTICE.facility)
}
inline void PK_LOG_PUBLISH_NOTICE::set_facility(const char* value, size_t size) {
  
  facility_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbapi.PK_LOG_PUBLISH_NOTICE.facility)
}
inline std::string* PK_LOG_PUBLISH_NOTICE::_internal_mutable_facility() {
  
  return facility_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PK_LOG_PUBLISH_NOTICE::release_facility() {
  // @@protoc_insertion_point(field_release:pbapi.PK_LOG_PUBLISH_NOTICE.facility)
  
  return facility_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PK_LOG_PUBLISH_NOTICE::set_allocated_facility(std::string* facility) {
  if (facility != nullptr) {
    
  } else {
    
  }
  facility_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), facility);
  // @@protoc_insertion_point(field_set_allocated:pbapi.PK_LOG_PUBLISH_NOTICE.facility)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace pbapi

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::pbapi::PK_LOG_HEARTBEAT_CMD_LOG_HEARTBEAT> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pbapi::PK_LOG_HEARTBEAT_CMD_LOG_HEARTBEAT>() {
  return ::pbapi::PK_LOG_HEARTBEAT_CMD_LOG_HEARTBEAT_descriptor();
}
template <> struct is_proto_enum< ::pbapi::PK_LOG_INFO_REQ_CMD_LOG_INFO_REQ> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pbapi::PK_LOG_INFO_REQ_CMD_LOG_INFO_REQ>() {
  return ::pbapi::PK_LOG_INFO_REQ_CMD_LOG_INFO_REQ_descriptor();
}
template <> struct is_proto_enum< ::pbapi::PK_LOG_INFO_RSP_CMD_LOG_INFO_RSP> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pbapi::PK_LOG_INFO_RSP_CMD_LOG_INFO_RSP>() {
  return ::pbapi::PK_LOG_INFO_RSP_CMD_LOG_INFO_RSP_descriptor();
}
template <> struct is_proto_enum< ::pbapi::PK_LOG_SUBSCRIBE_REQ_CMD_LOG_SUBSCRIBE_REQ> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pbapi::PK_LOG_SUBSCRIBE_REQ_CMD_LOG_SUBSCRIBE_REQ>() {
  return ::pbapi::PK_LOG_SUBSCRIBE_REQ_CMD_LOG_SUBSCRIBE_REQ_descriptor();
}
template <> struct is_proto_enum< ::pbapi::PK_LOG_SUBSCRIBE_RSP_CMD_LOG_SUBSCRIBE_RSP> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pbapi::PK_LOG_SUBSCRIBE_RSP_CMD_LOG_SUBSCRIBE_RSP>() {
  return ::pbapi::PK_LOG_SUBSCRIBE_RSP_CMD_LOG_SUBSCRIBE_RSP_descriptor();
}
template <> struct is_proto_enum< ::pbapi::PK_LOG_PUBLISH_NOTICE_CMD_LOG_PUBLISH_NOTICE> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pbapi::PK_LOG_PUBLISH_NOTICE_CMD_LOG_PUBLISH_NOTICE>() {
  return ::pbapi::PK_LOG_PUBLISH_NOTICE_CMD_LOG_PUBLISH_NOTICE_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_api_2eproto
